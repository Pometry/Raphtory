import textwrap
from importlib import import_module
from pathlib import Path
from types import (
    BuiltinFunctionType,
    BuiltinMethodType,
    GetSetDescriptorType,
    MethodDescriptorType,
    ModuleType,
)
from typing import List, Optional, Tuple, Union

MethodTypes = (BuiltinMethodType, MethodDescriptorType)
tab = " " * 4

comment = """###############################################################################
#                                                                             #
#                      AUTOGENERATED TYPE STUB FILE                           #
#                                                                             #
#    This file was automatically generated. Do not modify it directly.        #
#    Any changes made here may be lost when the file is regenerated.          #
#                                                                             #
###############################################################################\n"""


def clean_signature(sig: str, is_method: bool = False) -> Tuple[str, Optional[str]]:
    sig = sig.replace("$self", "self")
    sig = sig.replace("$cls", "cls")

    decorator = None
    if is_method:
        decorator = "@staticmethod"
        if "cls" in sig:
            decorator = "@classmethod"
        if "self" in sig:
            decorator = None

    return sig, decorator


def format_docstring(docstr: Optional[str], tab: str, ellipsis: bool) -> str:
    if docstr:
        if "\n" in docstr:
            return f'{tab}"""\n{textwrap.indent(docstr, tab)}\n{tab}"""\n'
        else:
            return f'{tab}"""{docstr}"""\n'
    else:
        return f"{tab}...\n" if ellipsis else ""


def gen_fn(
    function: Union[BuiltinFunctionType, BuiltinMethodType, MethodDescriptorType],
    is_method: bool = False,
) -> str:
    init_tab = tab if is_method else ""
    fn_tab = tab * 2 if is_method else tab
    docstr = format_docstring(function.__doc__, tab=fn_tab, ellipsis=True)
    signature, decorator = clean_signature(function.__text_signature__, is_method)  # type: ignore

    fn_str = f"{init_tab}def {function.__name__}{signature}:\n{docstr}"

    return f"{init_tab}{decorator}\n{fn_str}" if decorator else fn_str


def gen_property(prop: GetSetDescriptorType) -> str:
    prop_tab = tab * 2
    docstr = format_docstring(prop.__doc__, tab=prop_tab, ellipsis=True)

    return f"{tab}@property\n{tab}def {prop.__name__}(self):\n{docstr}"


def gen_class(cls: type) -> str:
    contents = [getattr(cls, function) for function in dir(cls)]
    entities: list[str] = []

    for entity in contents:
        if hasattr(entity, "__name__") and entity.__name__.startswith("__"):
            continue

        if isinstance(entity, MethodTypes):
            entities.append(gen_fn(entity, is_method=True))
        elif isinstance(entity, GetSetDescriptorType):
            entities.append(gen_property(entity))

    docstr = format_docstring(cls.__doc__, tab=tab, ellipsis=not entities)
    str_entities = "\n".join(entities)

    return f"class {cls.__name__}:\n{docstr}\n{str_entities}"


def gen_module(module: ModuleType) -> None:
    objs = [getattr(module, obj) for obj in dir(module)]

    stubs: List[str] = []
    modules: List[ModuleType] = []

    for obj in objs:
        if isinstance(obj, type) and obj.__module__ == "builtins":
            stubs.append(gen_class(obj))
        elif isinstance(obj, BuiltinFunctionType):
            stubs.append(gen_fn(obj))
        elif isinstance(obj, ModuleType) and obj.__loader__ is None:
            modules.append(obj)

    stub_file = "\n".join([comment, *sorted(stubs)])
    Path(".", "python", "raphtory", f"{module.__name__}.pyi").write_text(stub_file)

    for module in modules:
        gen_module(module)

    return


if __name__ == "__main__":
    raphtory = import_module("raphtory")
    gen_module(raphtory)
