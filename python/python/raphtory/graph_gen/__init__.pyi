###############################################################################
#                                                                             #
#                      AUTOGENERATED TYPE STUB FILE                           #
#                                                                             #
#    This file was automatically generated. Do not modify it directly.        #
#    Any changes made here may be lost when the file is regenerated.          #
#                                                                             #
###############################################################################

from typing import *
from raphtory import *
from raphtory.vectors import *
from raphtory.graphql import *
from raphtory.typing import *
from datetime import datetime
from pandas import DataFrame

def ba_preferential_attachment(
    g: Any, nodes_to_add: Any, edges_per_step: Any, seed: Any = None
):
    """
    Generates a graph using the preferential attachment model.

    Given a graph this function will add a user defined number of nodes, each with a user
    defined number of edges.
    This is an iterative algorithm where at each `step` a node is added and its neighbours are
    chosen from the pool of nodes already within the network.
    For this model the neighbours are chosen proportionally based upon their degree, favouring
    nodes with higher degree (more connections).
    This sampling is conducted without replacement.

    **Note:**  If the provided graph doesnt have enough nodes/edges for the initial sample,
    the min number of both will be added before generation begins.

    Arguments:
       g: The graph you wish to add nodes and edges to
       nodes_to_add: The amount of nodes you wish to add to the graph (steps)
       edges_per_step: The amount of edges a joining node should add to the graph
       seed: The seed used in rng, an array of length 32 containing ints (ints must have a max size of u8)

    Returns:

    None
    """

def random_attachment(g: Any, nodes_to_add: Any, edges_per_step: Any, seed: Any = None):
    """
    Generates a graph using the random attachment model

    This function is a graph generation model based upon:
    Callaway, Duncan S., et al. "Are randomly grown graphs really random?."
    Physical Review E 64.4 (2001): 041902.

    Arguments:
      g: The graph you wish to add nodes and edges to
      nodes_to_add: The amount of nodes you wish to add to the graph (steps)
      edges_per_step: The amount of edges a joining node should add to the graph
      seed: The seed used in rng, an array of length 32 containing ints (ints must have a max size of u8)

    Returns:
     None
    """
