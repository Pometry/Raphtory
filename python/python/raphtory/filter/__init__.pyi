from __future__ import annotations

###############################################################################
#                                                                             #
#                      AUTOGENERATED TYPE STUB FILE                           #
#                                                                             #
#    This file was automatically generated. Do not modify it directly.        #
#    Any changes made here may be lost when the file is regenerated.          #
#                                                                             #
###############################################################################

from typing import *
from raphtory import *
from raphtory.algorithms import *
from raphtory.vectors import *
from raphtory.node_state import *
from raphtory.graphql import *
from raphtory.typing import *
from datetime import datetime
from pandas import DataFrame
from os import PathLike
import networkx as nx  # type: ignore
import pyvis  # type: ignore

__all__ = ['FilterExpr', 'PropertyFilterOps', 'Node', 'EdgeFilterOp', 'EdgeEndpoint', 'Edge', 'ExplodedEdge', 'Property', 'Metadata', 'TemporalPropertyFilterBuilder']
class FilterExpr(object): 

    def __and__(self, value):
        """Return self&value."""

    def __invert__(self):
        """~self"""

    def __or__(self, value):
        """Return self|value."""

    def __rand__(self, value):
        """Return value&self."""

    def __ror__(self, value):
        """Return value|self."""

class PropertyFilterOps(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __gt__(self, value):
        """Return self>value."""

    def __le__(self, value):
        """Return self<=value."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def all(self): ...
    def any(self): ...
    def avg(self): ...
    def contains(self, value): ...
    def ends_with(self, value): ...
    def fuzzy_search(self, prop_value, levenshtein_distance, prefix_match): ...
    def is_in(self, values): ...
    def is_none(self): ...
    def is_not_in(self, values): ...
    def is_some(self): ...
    def len(self): ...
    def max(self): ...
    def min(self): ...
    def not_contains(self, value): ...
    def starts_with(self, value): ...
    def sum(self): ...

    @staticmethod
    def id():
        """
        Filter node by id

        Returns:
            NodeFilterBuilder: A filter builder for filtering by node id
        """

    @staticmethod
    def metadata(name):
        ...

    @staticmethod
    def name():
        """
        Filter node by name

        Returns:
            NodeFilterBuilder: A filter builder for filtering by node name
        """

    @staticmethod
    def node_type():
        """
        Filter node by type

        Returns:
            NodeFilterBuilder: A filter builder for filtering by node type
        """

    @staticmethod
    def property(name):
        ...

class EdgeFilterOp(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __gt__(self, value):
        """Return self>value."""

    def __le__(self, value):
        """Return self<=value."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def contains(self, value):
        ...

    def ends_with(self, value):
        ...

    def fuzzy_search(self, value, levenshtein_distance, prefix_match):
        ...

    def is_in(self, values):
        ...

    def is_not_in(self, values):
        ...

    def not_contains(self, value):
        ...

    def starts_with(self, value):
        ...

class EdgeEndpoint(object): 

    def id(self):
        ...

    def name(self):
        ...

class Edge(object): 

    @staticmethod
    def dst():
        ...

    @staticmethod
    def metadata(name):
        ...

    @staticmethod
    def property(name):
        ...

    @staticmethod
    def src():
        ...

class ExplodedEdge(object): 

    @staticmethod
    def metadata(name):
        ...

    @staticmethod
    def property(name):
        ...

class Property(PropertyFilterOps): 
    """
    Construct a property filter

    Arguments:
        name (str): the name of the property to filter
    """

    def temporal(self):
        ...

class Metadata(PropertyFilterOps): 
    """
    Construct a metadata filter

    Arguments:
        name (str): the name of the property to filter
    """


class TemporalPropertyFilterBuilder(object): 

    def all(self):
        ...

    def any(self):
        ...

    def first(self):
        ...

    def latest(self):
        ...
