from __future__ import annotations

###############################################################################
#                                                                             #
#                      AUTOGENERATED TYPE STUB FILE                           #
#                                                                             #
#    This file was automatically generated. Do not modify it directly.        #
#    Any changes made here may be lost when the file is regenerated.          #
#                                                                             #
###############################################################################

from typing import *
from raphtory import *
from raphtory.algorithms import *
from raphtory.vectors import *
from raphtory.node_state import *
from raphtory.graphql import *
from raphtory.typing import *
from datetime import datetime
from pandas import DataFrame
from os import PathLike
import networkx as nx  # type: ignore
import pyvis  # type: ignore
from raphtory.iterables import *

__all__ = [
    "FilterExpr",
    "PropertyFilterOps",
    "NodeFilterBuilder",
    "Node",
    "EdgeFilterOp",
    "EdgeEndpoint",
    "Edge",
    "Property",
    "Metadata",
    "TemporalPropertyFilterBuilder",
]

class FilterExpr(object):
    def __and__(self, value):
        """Return self&value."""

    def __invert__(self):
        """~self"""

    def __or__(self, value):
        """Return self|value."""

    def __rand__(self, value):
        """Return value&self."""

    def __ror__(self, value):
        """Return value|self."""

class PropertyFilterOps(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __gt__(self, value):
        """Return self>value."""

    def __le__(self, value):
        """Return self<=value."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def contains(self, value: Any):
        """
        Returns a filter expression that checks if this object contains a specified property.

        Parameters:
            value:

        Returns:
            FilterExpr:
        """

    def fuzzy_search(
        self, prop_value: Any, levenshtein_distance: Any, prefix_match: Any
    ):
        """
        Returns a filter expression that checks if the specified properties approximately match the specified string.

        Uses a specified Levenshtein distance and optional prefix matching.

        Parameters:
            prop_value: (str)
            levenshtein_distance: (usize)
            prefix_match: (bool)

        Returns:
            FilterExpr:
        """

    def is_in(self, values: Any):
        """
        Returns a filter expression that checks if a given value is in a specified iterable of properties.

        Parameters:
            values:

        Returns:
            FilterExpr:
        """

    def is_none(self):
        """
        Returns a filter expression that checks if a given value is none.

        Returns:
            FilterExpr:
        """

    def is_not_in(self, values: Any):
        """
        Returns a filter expression that checks if a given value is not in a specified iterable of properties.

        Parameters:
            values:

        Returns:
            FilterExpr:
        """

    def is_some(self):
        """
        Returns a filter expression that checks if a given value is some.

        Returns:
            FilterExpr:
        """

    def not_contains(self, value: Any):
        """
        Returns a filter expression that checks if this object does not contain a specified property.

        Parameters:
            value:

        Returns:
            FilterExpr:
        """

class NodeFilterBuilder(object):
    """
    A builder for constructing node filters

    To create a filter builder see [Node][raphtory.filter.Node].
    """

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __gt__(self, value):
        """Return self>value."""

    def __le__(self, value):
        """Return self<=value."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def contains(self, value: Any):
        """
        Returns a filter expression that checks if the specified iterable of strings contains a given value.

        Parameters:
            value:

        Returns:
            filter expression
        """

    def fuzzy_search(self, value: Any, levenshtein_distance: Any, prefix_match: Any):
        """
        Returns a filter expression that checks if the specified properties approximately match the specified string.

        Uses a specified Levenshtein distance and optional prefix matching.

        Parameters:
            value:
            levenshtein_distance:
            prefix_match:

        Returns:
            filter expression
        """

    def is_in(self, values: Any):
        """
        Returns a filter expression that checks if a specified value is contained within a given iterable of strings.

        Parameters:
            values:

        Returns:
            filter expression
        """

    def is_not_in(self, values: Any):
        """
        Returns a filter expression that checks if specified value is not contained within a given iterable of strings.

        Parameters:
            values:

        Returns:
            filter expression
        """

    def not_contains(self, value: Any):
        """
        Returns a filter expression that checks if the specified iterable of strings does not contain a given value.


        Parameters:
            value:

        Returns:
            filter expression
        """

class Node(object):
    @staticmethod
    def name():
        """
        Filter node by name

        Returns:
            NodeFilterBuilder: A filter builder for filtering by node name
        """

    @staticmethod
    def node_type():
        """
        Filter node by type

        Returns:
            NodeFilterBuilder: A filter builder for filtering by node type
        """

class EdgeFilterOp(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __gt__(self, value):
        """Return self>value."""

    def __le__(self, value):
        """Return self<=value."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def contains(self, value):
        """
        Returns a filter expression that checks if a given value contains the specified string.

        Returns:
            filter expression
        """

    def fuzzy_search(self, value, levenshtein_distance: Any, prefix_match: Any):
        """
        Returns a filter expression that checks if the specified properties approximately match the specified string.

        Uses a specified Levenshtein distance and optional prefix matching.

        Parameters:
            prop_value: (str)
            levenshtein_distance: (usize)
            prefix_match: (bool)

        Returns:
            FilterExpr:
        """

    def is_in(self, values):
        """
        Returns a filter expression that checks if a given value is contained within the specified iterable of strings.

        Returns:
            filter expression
        """

    def is_not_in(self, values):
        """
        Returns a filter expression that checks if a given value is not contained within the provided iterable of strings.

        Returns:
            filter expression
        """

    def not_contains(self, value):
        """
        Returns a filter expression that checks if a given value does not contain the specified string.

        Returns:
            filter expression
        """

class EdgeEndpoint(object):
    def name(self): ...

class Edge(object):
    @staticmethod
    def dst(): ...
    @staticmethod
    def src(): ...

class Property(PropertyFilterOps):
    """
    Construct a property filter

    Arguments:
        name (str): the name of the property to filter
    """

    def __new__(cls, name: str) -> Property:
        """Create and return a new object.  See help(type) for accurate signature."""

    def temporal(self): ...

class Metadata(PropertyFilterOps):
    """
    Construct a metadata filter

    Arguments:
        name (str): the name of the property to filter
    """

    def __new__(cls, name: str) -> Metadata:
        """Create and return a new object.  See help(type) for accurate signature."""

class TemporalPropertyFilterBuilder(object):
    def any(self): ...
    def latest(self): ...
