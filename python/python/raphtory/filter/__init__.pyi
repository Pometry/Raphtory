from __future__ import annotations

###############################################################################
#                                                                             #
#                      AUTOGENERATED TYPE STUB FILE                           #
#                                                                             #
#    This file was automatically generated. Do not modify it directly.        #
#    Any changes made here may be lost when the file is regenerated.          #
#                                                                             #
###############################################################################

from typing import *
from raphtory import *
from raphtory.algorithms import *
from raphtory.vectors import *
from raphtory.node_state import *
from raphtory.graphql import *
from raphtory.typing import *
from datetime import datetime
from pandas import DataFrame
from os import PathLike
import networkx as nx  # type: ignore
import pyvis  # type: ignore

__all__ = [
    "NodeFilterOp",
    "Node",
    "EdgeFilterOp",
    "EdgeEndpoint",
    "Edge",
    "PropertyFilterBuilder",
    "TemporalPropertyFilterBuilder",
    "Property",
]

class NodeFilterOp(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __gt__(self, value):
        """Return self>value."""

    def __le__(self, value):
        """Return self<=value."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def contains(self, value): ...
    def fuzzy_search(self, value, levenshtein_distance, prefix_match): ...
    def is_in(self, values): ...
    def is_not_in(self, values): ...
    def not_contains(self, value): ...

class Node(object):
    @staticmethod
    def name(): ...
    @staticmethod
    def node_type(): ...

class EdgeFilterOp(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __gt__(self, value):
        """Return self>value."""

    def __le__(self, value):
        """Return self<=value."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def contains(self, value): ...
    def fuzzy_search(self, value, levenshtein_distance, prefix_match): ...
    def is_in(self, values): ...
    def is_not_in(self, values): ...
    def not_contains(self, value): ...

class EdgeEndpoint(object):
    def name(self): ...

class Edge(object):
    @staticmethod
    def dst(): ...
    @staticmethod
    def src(): ...

class PropertyFilterBuilder(PropertyFilterOps):
    def __new__(cls, name) -> PropertyFilterBuilder:
        """Create and return a new object.  See help(type) for accurate signature."""

    def constant(self): ...
    def temporal(self): ...

class TemporalPropertyFilterBuilder(object):
    def any(self): ...
    def latest(self): ...

def Property(name): ...
