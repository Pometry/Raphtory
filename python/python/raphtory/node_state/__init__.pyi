from __future__ import annotations

###############################################################################
#                                                                             #
#                      AUTOGENERATED TYPE STUB FILE                           #
#                                                                             #
#    This file was automatically generated. Do not modify it directly.        #
#    Any changes made here may be lost when the file is regenerated.          #
#                                                                             #
###############################################################################

from typing import *
from raphtory import *
import raphtory.filter as filter
from raphtory.algorithms import *
from raphtory.vectors import *
from raphtory.graphql import *
from raphtory.typing import *
from datetime import datetime
from pandas import DataFrame
from os import PathLike
import networkx as nx  # type: ignore
import pyvis  # type: ignore

__all__ = ['NodeGroups', 'DegreeView', 'NodeStateUsize', 'NodeStateU64', 'NodeStateOptionI64', 'IdView', 'NodeStateGID', 'EarliestTimeView', 'LatestTimeView', 'NameView', 'NodeStateString', 'EarliestDateTimeView', 'LatestDateTimeView', 'NodeStateOptionDateTime', 'HistoryView', 'EdgeHistoryCountView', 'NodeStateListI64', 'HistoryDateTimeView', 'NodeStateOptionListDateTime', 'NodeTypeView', 'NodeStateOptionStr', 'NodeStateListDateTime', 'NodeStateWeightedSP', 'NodeStateF64', 'NodeStateNodes', 'NodeStateReachability', 'NodeStateListF64', 'NodeStateMotifs', 'NodeStateHits', 'NodeStateSEIR', 'NodeLayout', 'NodeStateF64String']
class NodeGroups(object): 

    def __bool__(self):
        """True if self else False"""

    def __getitem__(self, key):
        """Return self[key]."""

    def __iter__(self):
        """Implement iter(self)."""

    def __len__(self):
        """Return len(self)."""

    def group(self, index: int) -> Tuple[Any, Nodes]:
        """
        Get group nodes and value

        Arguments:
            index (int): the group index

        Returns:
            Tuple[Any, Nodes]: Nodes and corresponding value
        """

    def group_subgraph(self, index: int) -> Tuple[Any, GraphView]:
        """
        Get group as subgraph

        Arguments:
            index (int): the group index

        Returns:
            Tuple[Any, GraphView]: The group as a subgraph and corresponding value
        """

    def iter_subgraphs(self) -> Iterator[Tuple[Any, GraphView]]:
        """
        Iterate over group subgraphs

        Returns:
            Iterator[Tuple[Any, GraphView]]: Iterator over subgraphs with corresponding value
        """

class DegreeView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateUsize:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateUsize: The k smallest values as a node state
        """

    def collect(self) -> list[int]:
        """
        Compute all values and return the result as a list

        Returns:
             list[int]: all values as a list
        """

    def compute(self) -> NodeStateUsize:
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateUsize: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[int] = None) -> Optional[int]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[int]): the default value. Defaults to None.

        Returns:
            Optional[int]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, int]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, int]]: Iterator over items
        """

    def max(self) -> Optional[int]:
        """
        Return the maximum value

        Returns:
             Optional[int]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The Node and maximum value or `None` if empty
        """

    def mean(self) -> float:
        """
        mean of values over all nodes

        Returns:
            float: mean value
        """

    def median(self) -> Optional[int]:
        """
        Return the median value

        Returns:
             Optional[int]:
        """

    def median_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The median value or `None` if empty
        """

    def min(self) -> Optional[int]:
        """
        Return the minimum value

        Returns:
             Optional[int]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateUsize:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateUsize: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateUsize:
        """
        Sort results by node id

        Returns:
             NodeStateUsize: The sorted node state
        """

    def sum(self) -> int:
        """
        sum of values over all nodes

        Returns:
                int: the sum
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateUsize:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateUsize: The k largest values as a node state
        """

    def values(self) -> Iterator[int]:
        """
        Iterate over values

        Returns:
             Iterator[int]: Iterator over values
        """

class NodeStateUsize(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateUsize:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateUsize: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[int] = None) -> Optional[int]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[int]): the default value. Defaults to None.

        Returns:
            Optional[int]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, int]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, int]]: Iterator over items
        """

    def max(self) -> Optional[int]:
        """
        Return the maximum value

        Returns:
             Optional[int]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The Node and maximum value or `None` if empty
        """

    def mean(self) -> float:
        """
        mean of values over all nodes

        Returns:
            float: mean value
        """

    def median(self) -> Optional[int]:
        """
        Return the median value

        Returns:
             Optional[int]:
        """

    def median_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The median value or `None` if empty
        """

    def min(self) -> Optional[int]:
        """
        Return the minimum value

        Returns:
             Optional[int]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateUsize:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateUsize: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateUsize:
        """
        Sort results by node id

        Returns:
             NodeStateUsize: The sorted node state
        """

    def sum(self) -> int:
        """
        sum of values over all nodes

        Returns:
                int: the sum
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateUsize:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateUsize: The k largest values as a node state
        """

    def values(self) -> Iterator[int]:
        """
        Iterate over values

        Returns:
             Iterator[int]: Iterator over values
        """

class NodeStateU64(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateU64:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateU64: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[int] = None) -> Optional[int]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[int]): the default value. Defaults to None.

        Returns:
            Optional[int]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, int]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, int]]: Iterator over items
        """

    def max(self) -> Optional[int]:
        """
        Return the maximum value

        Returns:
             Optional[int]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The Node and maximum value or `None` if empty
        """

    def mean(self) -> float:
        """
        mean of values over all nodes

        Returns:
            float: mean value
        """

    def median(self) -> Optional[int]:
        """
        Return the median value

        Returns:
             Optional[int]:
        """

    def median_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The median value or `None` if empty
        """

    def min(self) -> Optional[int]:
        """
        Return the minimum value

        Returns:
             Optional[int]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateU64:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateU64: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateU64:
        """
        Sort results by node id

        Returns:
             NodeStateU64: The sorted node state
        """

    def sum(self) -> int:
        """
        sum of values over all nodes

        Returns:
                int: the sum
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateU64:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateU64: The k largest values as a node state
        """

    def values(self) -> Iterator[int]:
        """
        Iterate over values

        Returns:
             Iterator[int]: Iterator over values
        """

class NodeStateOptionI64(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateOptionI64:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionI64: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[Optional[int]] = None) -> Optional[Optional[int]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Optional[int]]): the default value. Defaults to None.

        Returns:
            Optional[Optional[int]]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, Optional[int]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Optional[int]]]: Iterator over items
        """

    def max(self) -> Optional[Optional[int]]:
        """
        Return the maximum value

        Returns:
             Optional[Optional[int]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Optional[int]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Optional[int]]:
        """
        Return the median value

        Returns:
             Optional[Optional[int]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Optional[int]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Optional[int]]:
        """
        Return the minimum value

        Returns:
             Optional[Optional[int]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Optional[int]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateOptionI64:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionI64: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateOptionI64:
        """
        Sort results by node id

        Returns:
             NodeStateOptionI64: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateOptionI64:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionI64: The k largest values as a node state
        """

    def values(self) -> Iterator[Optional[int]]:
        """
        Iterate over values

        Returns:
             Iterator[Optional[int]]: Iterator over values
        """

class IdView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateGID:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateGID: The k smallest values as a node state
        """

    def collect(self) -> list[GID]:
        """
        Compute all values and return the result as a list

        Returns:
             list[GID]: all values as a list
        """

    def compute(self) -> NodeStateGID:
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateGID: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[GID] = None) -> Optional[GID]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[GID]): the default value. Defaults to None.

        Returns:
            Optional[GID]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, GID]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, GID]]: Iterator over items
        """

    def max(self) -> Optional[GID]:
        """
        Return the maximum value

        Returns:
             Optional[GID]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, GID]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[GID]:
        """
        Return the median value

        Returns:
             Optional[GID]:
        """

    def median_item(self) -> Optional[Tuple[Node, GID]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]: The median value or `None` if empty
        """

    def min(self) -> Optional[GID]:
        """
        Return the minimum value

        Returns:
             Optional[GID]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, GID]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateGID:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateGID: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateGID:
        """
        Sort results by node id

        Returns:
             NodeStateGID: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateGID:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateGID: The k largest values as a node state
        """

    def values(self) -> Iterator[GID]:
        """
        Iterate over values

        Returns:
             Iterator[GID]: Iterator over values
        """

class NodeStateGID(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateGID:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateGID: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[GID] = None) -> Optional[GID]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[GID]): the default value. Defaults to None.

        Returns:
            Optional[GID]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, GID]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, GID]]: Iterator over items
        """

    def max(self) -> Optional[GID]:
        """
        Return the maximum value

        Returns:
             Optional[GID]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, GID]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[GID]:
        """
        Return the median value

        Returns:
             Optional[GID]:
        """

    def median_item(self) -> Optional[Tuple[Node, GID]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]: The median value or `None` if empty
        """

    def min(self) -> Optional[GID]:
        """
        Return the minimum value

        Returns:
             Optional[GID]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, GID]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateGID:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateGID: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateGID:
        """
        Sort results by node id

        Returns:
             NodeStateGID: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateGID:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateGID: The k largest values as a node state
        """

    def values(self) -> Iterator[GID]:
        """
        Iterate over values

        Returns:
             Iterator[GID]: Iterator over values
        """

class EarliestTimeView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateOptionI64:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionI64: The k smallest values as a node state
        """

    def collect(self) -> list[Optional[int]]:
        """
        Compute all values and return the result as a list

        Returns:
             list[Optional[int]]: all values as a list
        """

    def compute(self) -> NodeStateOptionI64:
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionI64: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[Optional[int]] = None) -> Optional[Optional[int]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Optional[int]]): the default value. Defaults to None.

        Returns:
            Optional[Optional[int]]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, Optional[int]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Optional[int]]]: Iterator over items
        """

    def max(self) -> Optional[Optional[int]]:
        """
        Return the maximum value

        Returns:
             Optional[Optional[int]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Optional[int]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Optional[int]]:
        """
        Return the median value

        Returns:
             Optional[Optional[int]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Optional[int]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Optional[int]]:
        """
        Return the minimum value

        Returns:
             Optional[Optional[int]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Optional[int]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateOptionI64:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionI64: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateOptionI64:
        """
        Sort results by node id

        Returns:
             NodeStateOptionI64: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateOptionI64:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionI64: The k largest values as a node state
        """

    def values(self) -> Iterator[Optional[int]]:
        """
        Iterate over values

        Returns:
             Iterator[Optional[int]]: Iterator over values
        """

class LatestTimeView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateOptionI64:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionI64: The k smallest values as a node state
        """

    def collect(self) -> list[Optional[int]]:
        """
        Compute all values and return the result as a list

        Returns:
             list[Optional[int]]: all values as a list
        """

    def compute(self) -> NodeStateOptionI64:
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionI64: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[Optional[int]] = None) -> Optional[Optional[int]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Optional[int]]): the default value. Defaults to None.

        Returns:
            Optional[Optional[int]]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, Optional[int]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Optional[int]]]: Iterator over items
        """

    def max(self) -> Optional[Optional[int]]:
        """
        Return the maximum value

        Returns:
             Optional[Optional[int]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Optional[int]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Optional[int]]:
        """
        Return the median value

        Returns:
             Optional[Optional[int]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Optional[int]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Optional[int]]:
        """
        Return the minimum value

        Returns:
             Optional[Optional[int]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Optional[int]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateOptionI64:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionI64: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateOptionI64:
        """
        Sort results by node id

        Returns:
             NodeStateOptionI64: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateOptionI64:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionI64: The k largest values as a node state
        """

    def values(self) -> Iterator[Optional[int]]:
        """
        Iterate over values

        Returns:
             Iterator[Optional[int]]: Iterator over values
        """

class NameView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateString:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateString: The k smallest values as a node state
        """

    def collect(self) -> list[str]:
        """
        Compute all values and return the result as a list

        Returns:
             list[str]: all values as a list
        """

    def compute(self) -> NodeStateString:
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateString: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[str] = None) -> Optional[str]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[str]): the default value. Defaults to None.

        Returns:
            Optional[str]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, str]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, str]]: Iterator over items
        """

    def max(self) -> Optional[str]:
        """
        Return the maximum value

        Returns:
             Optional[str]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, str]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[str]:
        """
        Return the median value

        Returns:
             Optional[str]:
        """

    def median_item(self) -> Optional[Tuple[Node, str]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]: The median value or `None` if empty
        """

    def min(self) -> Optional[str]:
        """
        Return the minimum value

        Returns:
             Optional[str]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, str]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateString:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateString: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateString:
        """
        Sort results by node id

        Returns:
             NodeStateString: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateString:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateString: The k largest values as a node state
        """

    def values(self) -> Iterator[str]:
        """
        Iterate over values

        Returns:
             Iterator[str]: Iterator over values
        """

class NodeStateString(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateString:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateString: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[str] = None) -> Optional[str]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[str]): the default value. Defaults to None.

        Returns:
            Optional[str]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, str]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, str]]: Iterator over items
        """

    def max(self) -> Optional[str]:
        """
        Return the maximum value

        Returns:
             Optional[str]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, str]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[str]:
        """
        Return the median value

        Returns:
             Optional[str]:
        """

    def median_item(self) -> Optional[Tuple[Node, str]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]: The median value or `None` if empty
        """

    def min(self) -> Optional[str]:
        """
        Return the minimum value

        Returns:
             Optional[str]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, str]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateString:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateString: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateString:
        """
        Sort results by node id

        Returns:
             NodeStateString: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateString:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateString: The k largest values as a node state
        """

    def values(self) -> Iterator[str]:
        """
        Iterate over values

        Returns:
             Iterator[str]: Iterator over values
        """

class EarliestDateTimeView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateOptionDateTime:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime: The k smallest values as a node state
        """

    def collect(self) -> list[Optional[datetime]]:
        """
        Compute all values and return the result as a list

        Returns:
             list[Optional[datetime]]: all values as a list
        """

    def compute(self) -> NodeStateOptionDateTime:
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionDateTime: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[Optional[datetime]] = None) -> Optional[Optional[datetime]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Optional[datetime]]): the default value. Defaults to None.

        Returns:
            Optional[Optional[datetime]]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, Optional[datetime]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Optional[datetime]]]: Iterator over items
        """

    def max(self) -> Optional[Optional[datetime]]:
        """
        Return the maximum value

        Returns:
             Optional[Optional[datetime]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Optional[datetime]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[datetime]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Optional[datetime]]:
        """
        Return the median value

        Returns:
             Optional[Optional[datetime]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Optional[datetime]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[datetime]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Optional[datetime]]:
        """
        Return the minimum value

        Returns:
             Optional[Optional[datetime]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Optional[datetime]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[datetime]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateOptionDateTime:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionDateTime: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateOptionDateTime:
        """
        Sort results by node id

        Returns:
             NodeStateOptionDateTime: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateOptionDateTime:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime: The k largest values as a node state
        """

    def values(self) -> Iterator[Optional[datetime]]:
        """
        Iterate over values

        Returns:
             Iterator[Optional[datetime]]: Iterator over values
        """

class LatestDateTimeView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateOptionDateTime:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime: The k smallest values as a node state
        """

    def collect(self) -> list[Optional[datetime]]:
        """
        Compute all values and return the result as a list

        Returns:
             list[Optional[datetime]]: all values as a list
        """

    def compute(self) -> NodeStateOptionDateTime:
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionDateTime: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[Optional[datetime]] = None) -> Optional[Optional[datetime]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Optional[datetime]]): the default value. Defaults to None.

        Returns:
            Optional[Optional[datetime]]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, Optional[datetime]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Optional[datetime]]]: Iterator over items
        """

    def max(self) -> Optional[Optional[datetime]]:
        """
        Return the maximum value

        Returns:
             Optional[Optional[datetime]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Optional[datetime]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[datetime]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Optional[datetime]]:
        """
        Return the median value

        Returns:
             Optional[Optional[datetime]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Optional[datetime]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[datetime]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Optional[datetime]]:
        """
        Return the minimum value

        Returns:
             Optional[Optional[datetime]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Optional[datetime]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[datetime]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateOptionDateTime:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionDateTime: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateOptionDateTime:
        """
        Sort results by node id

        Returns:
             NodeStateOptionDateTime: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateOptionDateTime:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime: The k largest values as a node state
        """

    def values(self) -> Iterator[Optional[datetime]]:
        """
        Iterate over values

        Returns:
             Iterator[Optional[datetime]]: Iterator over values
        """

class NodeStateOptionDateTime(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateOptionDateTime:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[Optional[datetime]] = None) -> Optional[Optional[datetime]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Optional[datetime]]): the default value. Defaults to None.

        Returns:
            Optional[Optional[datetime]]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, Optional[datetime]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Optional[datetime]]]: Iterator over items
        """

    def max(self) -> Optional[Optional[datetime]]:
        """
        Return the maximum value

        Returns:
             Optional[Optional[datetime]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Optional[datetime]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[datetime]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Optional[datetime]]:
        """
        Return the median value

        Returns:
             Optional[Optional[datetime]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Optional[datetime]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[datetime]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Optional[datetime]]:
        """
        Return the minimum value

        Returns:
             Optional[Optional[datetime]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Optional[datetime]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[datetime]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateOptionDateTime:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionDateTime: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateOptionDateTime:
        """
        Sort results by node id

        Returns:
             NodeStateOptionDateTime: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateOptionDateTime:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime: The k largest values as a node state
        """

    def values(self) -> Iterator[Optional[datetime]]:
        """
        Iterate over values

        Returns:
             Iterator[Optional[datetime]]: Iterator over values
        """

class HistoryView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateListI64:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListI64: The k smallest values as a node state
        """

    def collect(self) -> list[list[int]]:
        """
        Compute all values and return the result as a list

        Returns:
             list[list[int]]: all values as a list
        """

    def compute(self) -> NodeStateListI64:
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateListI64: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[list[int]] = None) -> Optional[list[int]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[list[int]]): the default value. Defaults to None.

        Returns:
            Optional[list[int]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, list[int]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, list[int]]]: Iterator over items
        """

    def max(self) -> Optional[list[int]]:
        """
        Return the maximum value

        Returns:
             Optional[list[int]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, list[int]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[list[int]]:
        """
        Return the median value

        Returns:
             Optional[list[int]]:
        """

    def median_item(self) -> Optional[Tuple[Node, list[int]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[list[int]]:
        """
        Return the minimum value

        Returns:
             Optional[list[int]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, list[int]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateListI64:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateListI64: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateListI64:
        """
        Sort results by node id

        Returns:
             NodeStateListI64: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateListI64:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListI64: The k largest values as a node state
        """

    def values(self) -> Iterator[list[int]]:
        """
        Iterate over values

        Returns:
             Iterator[list[int]]: Iterator over values
        """

class EdgeHistoryCountView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> EdgeHistoryCountView:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             EdgeHistoryCountView: The k smallest values as a node state
        """

    def collect(self) -> list[int]:
        """
        Compute all values and return the result as a list

        Returns:
             list[int]: all values as a list
        """

    def compute(self) -> EdgeHistoryCountView:
        """
        Compute all values and return the result as a node view

        Returns:
             EdgeHistoryCountView: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[int] = None) -> Optional[int]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[int]): the default value. Defaults to None.

        Returns:
            Optional[int]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, int]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, int]]: Iterator over items
        """

    def max(self) -> Optional[int]:
        """
        Return the maximum value

        Returns:
             Optional[int]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The Node and maximum value or `None` if empty
        """

    def mean(self) -> float:
        """
        mean of values over all nodes

        Returns:
            float: mean value
        """

    def median(self) -> Optional[int]:
        """
        Return the median value

        Returns:
             Optional[int]:
        """

    def median_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The median value or `None` if empty
        """

    def min(self) -> Optional[int]:
        """
        Return the minimum value

        Returns:
             Optional[int]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, int]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> EdgeHistoryCountView:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             EdgeHistoryCountView: Sorted node state
        """

    def sorted_by_id(self) -> EdgeHistoryCountView:
        """
        Sort results by node id

        Returns:
             EdgeHistoryCountView: The sorted node state
        """

    def sum(self) -> int:
        """
        sum of values over all nodes

        Returns:
                int: the sum
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> EdgeHistoryCountView:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             EdgeHistoryCountView: The k largest values as a node state
        """

    def values(self) -> Iterator[int]:
        """
        Iterate over values

        Returns:
             Iterator[int]: Iterator over values
        """

class NodeStateListI64(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateListI64:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListI64: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[list[int]] = None) -> Optional[list[int]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[list[int]]): the default value. Defaults to None.

        Returns:
            Optional[list[int]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, list[int]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, list[int]]]: Iterator over items
        """

    def max(self) -> Optional[list[int]]:
        """
        Return the maximum value

        Returns:
             Optional[list[int]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, list[int]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[list[int]]:
        """
        Return the median value

        Returns:
             Optional[list[int]]:
        """

    def median_item(self) -> Optional[Tuple[Node, list[int]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[list[int]]:
        """
        Return the minimum value

        Returns:
             Optional[list[int]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, list[int]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateListI64:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateListI64: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateListI64:
        """
        Sort results by node id

        Returns:
             NodeStateListI64: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateListI64:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListI64: The k largest values as a node state
        """

    def values(self) -> Iterator[list[int]]:
        """
        Iterate over values

        Returns:
             Iterator[list[int]]: Iterator over values
        """

class HistoryDateTimeView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateOptionListDateTime:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionListDateTime: The k smallest values as a node state
        """

    def collect(self) -> list[Optional[list[datetime]]]:
        """
        Compute all values and return the result as a list

        Returns:
             list[Optional[list[datetime]]]: all values as a list
        """

    def compute(self) -> NodeStateOptionListDateTime:
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionListDateTime: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[Optional[list[datetime]]] = None) -> Optional[Optional[list[datetime]]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Optional[list[datetime]]]): the default value. Defaults to None.

        Returns:
            Optional[Optional[list[datetime]]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, Optional[list[datetime]]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Optional[list[datetime]]]]: Iterator over items
        """

    def max(self) -> Optional[Optional[list[datetime]]]:
        """
        Return the maximum value

        Returns:
             Optional[Optional[list[datetime]]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Optional[list[datetime]]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[datetime]]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Optional[list[datetime]]]:
        """
        Return the median value

        Returns:
             Optional[Optional[list[datetime]]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Optional[list[datetime]]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[datetime]]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Optional[list[datetime]]]:
        """
        Return the minimum value

        Returns:
             Optional[Optional[list[datetime]]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Optional[list[datetime]]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[datetime]]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateOptionListDateTime:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionListDateTime: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateOptionListDateTime:
        """
        Sort results by node id

        Returns:
             NodeStateOptionListDateTime: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateOptionListDateTime:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionListDateTime: The k largest values as a node state
        """

    def values(self) -> Iterator[Optional[list[datetime]]]:
        """
        Iterate over values

        Returns:
             Iterator[Optional[list[datetime]]]: Iterator over values
        """

class NodeStateOptionListDateTime(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateOptionListDateTime:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionListDateTime: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[Optional[list[datetime]]] = None) -> Optional[Optional[list[datetime]]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Optional[list[datetime]]]): the default value. Defaults to None.

        Returns:
            Optional[Optional[list[datetime]]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, Optional[list[datetime]]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Optional[list[datetime]]]]: Iterator over items
        """

    def max(self) -> Optional[Optional[list[datetime]]]:
        """
        Return the maximum value

        Returns:
             Optional[Optional[list[datetime]]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Optional[list[datetime]]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[datetime]]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Optional[list[datetime]]]:
        """
        Return the median value

        Returns:
             Optional[Optional[list[datetime]]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Optional[list[datetime]]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[datetime]]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Optional[list[datetime]]]:
        """
        Return the minimum value

        Returns:
             Optional[Optional[list[datetime]]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Optional[list[datetime]]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[datetime]]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateOptionListDateTime:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionListDateTime: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateOptionListDateTime:
        """
        Sort results by node id

        Returns:
             NodeStateOptionListDateTime: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateOptionListDateTime:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionListDateTime: The k largest values as a node state
        """

    def values(self) -> Iterator[Optional[list[datetime]]]:
        """
        Iterate over values

        Returns:
             Iterator[Optional[list[datetime]]]: Iterator over values
        """

class NodeTypeView(object): 
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateOptionStr:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionStr: The k smallest values as a node state
        """

    def collect(self) -> list[Optional[str]]:
        """
        Compute all values and return the result as a list

        Returns:
             list[Optional[str]]: all values as a list
        """

    def compute(self) -> NodeStateOptionStr:
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionStr: the computed `NodeState`
        """

    def get(self, node: NodeInput, default: Optional[Optional[str]] = None) -> Optional[Optional[str]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Optional[str]]): the default value. Defaults to None.

        Returns:
            Optional[Optional[str]]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, Optional[str]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Optional[str]]]: Iterator over items
        """

    def max(self) -> Optional[Optional[str]]:
        """
        Return the maximum value

        Returns:
             Optional[Optional[str]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Optional[str]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Optional[str]]:
        """
        Return the median value

        Returns:
             Optional[Optional[str]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Optional[str]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Optional[str]]:
        """
        Return the minimum value

        Returns:
             Optional[Optional[str]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Optional[str]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateOptionStr:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionStr: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateOptionStr:
        """
        Sort results by node id

        Returns:
             NodeStateOptionStr: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateOptionStr:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionStr: The k largest values as a node state
        """

    def values(self) -> Iterator[Optional[str]]:
        """
        Iterate over values

        Returns:
             Iterator[Optional[str]]: Iterator over values
        """

class NodeStateOptionStr(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateOptionStr:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionStr: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[Optional[str]] = None) -> Optional[Optional[str]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Optional[str]]): the default value. Defaults to None.

        Returns:
            Optional[Optional[str]]: the value for the node or the default value
        """

    def groups(self) -> NodeGroups:
        """
        Group by value

        Returns:
            NodeGroups: The grouped nodes
        """

    def items(self) -> Iterator[Tuple[Node, Optional[str]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Optional[str]]]: Iterator over items
        """

    def max(self) -> Optional[Optional[str]]:
        """
        Return the maximum value

        Returns:
             Optional[Optional[str]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Optional[str]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Optional[str]]:
        """
        Return the median value

        Returns:
             Optional[Optional[str]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Optional[str]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Optional[str]]:
        """
        Return the minimum value

        Returns:
             Optional[Optional[str]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Optional[str]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateOptionStr:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionStr: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateOptionStr:
        """
        Sort results by node id

        Returns:
             NodeStateOptionStr: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateOptionStr:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionStr: The k largest values as a node state
        """

    def values(self) -> Iterator[Optional[str]]:
        """
        Iterate over values

        Returns:
             Iterator[Optional[str]]: Iterator over values
        """

class NodeStateListDateTime(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateListDateTime:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListDateTime: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[list[datetime]] = None) -> Optional[list[datetime]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[list[datetime]]): the default value. Defaults to None.

        Returns:
            Optional[list[datetime]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, list[datetime]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, list[datetime]]]: Iterator over items
        """

    def max(self) -> Optional[list[datetime]]:
        """
        Return the maximum value

        Returns:
             Optional[list[datetime]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, list[datetime]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[datetime]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[list[datetime]]:
        """
        Return the median value

        Returns:
             Optional[list[datetime]]:
        """

    def median_item(self) -> Optional[Tuple[Node, list[datetime]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, list[datetime]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[list[datetime]]:
        """
        Return the minimum value

        Returns:
             Optional[list[datetime]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, list[datetime]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[datetime]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateListDateTime:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateListDateTime: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateListDateTime:
        """
        Sort results by node id

        Returns:
             NodeStateListDateTime: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateListDateTime:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListDateTime: The k largest values as a node state
        """

    def values(self) -> Iterator[list[datetime]]:
        """
        Iterate over values

        Returns:
             Iterator[list[datetime]]: Iterator over values
        """

class NodeStateWeightedSP(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def get(self, node: NodeInput, default: Optional[Tuple[float, Nodes]] = None) -> Optional[Tuple[float, Nodes]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Tuple[float, Nodes]]): the default value. Defaults to None.

        Returns:
            Optional[Tuple[float, Nodes]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, Tuple[float, Nodes]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Tuple[float, Nodes]]]: Iterator over items
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted_by_id(self) -> NodeStateWeightedSP:
        """
        Sort results by node id

        Returns:
             NodeStateWeightedSP: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def values(self) -> Iterator[Tuple[float, Nodes]]:
        """
        Iterate over values

        Returns:
             Iterator[Tuple[float, Nodes]]: Iterator over values
        """

class NodeStateF64(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateF64:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateF64: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[float] = None) -> Optional[float]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[float]): the default value. Defaults to None.

        Returns:
            Optional[float]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, float]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, float]]: Iterator over items
        """

    def max(self) -> Optional[float]:
        """
        Return the maximum value

        Returns:
             Optional[float]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, float]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, float]]: The Node and maximum value or `None` if empty
        """

    def mean(self) -> float:
        """
        mean of values over all nodes

        Returns:
            float: mean value
        """

    def median(self) -> Optional[float]:
        """
        Return the median value

        Returns:
             Optional[float]:
        """

    def median_item(self) -> Optional[Tuple[Node, float]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, float]]: The median value or `None` if empty
        """

    def min(self) -> Optional[float]:
        """
        Return the minimum value

        Returns:
             Optional[float]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, float]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, float]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateF64:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateF64: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateF64:
        """
        Sort results by node id

        Returns:
             NodeStateF64: The sorted node state
        """

    def sum(self) -> float:
        """
        sum of values over all nodes

        Returns:
                float: the sum
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateF64:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateF64: The k largest values as a node state
        """

    def values(self) -> Iterator[float]:
        """
        Iterate over values

        Returns:
             Iterator[float]: Iterator over values
        """

class NodeStateNodes(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def get(self, node: NodeInput, default: Optional[Nodes] = None) -> Optional[Nodes]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Nodes]): the default value. Defaults to None.

        Returns:
            Optional[Nodes]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, Nodes]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Nodes]]: Iterator over items
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted_by_id(self) -> NodeStateNodes:
        """
        Sort results by node id

        Returns:
             NodeStateNodes: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def values(self) -> Iterator[Nodes]:
        """
        Iterate over values

        Returns:
             Iterator[Nodes]: Iterator over values
        """

class NodeStateReachability(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def get(self, node: NodeInput, default: Optional[list[Tuple[int, str]]] = None) -> Optional[list[Tuple[int, str]]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[list[Tuple[int, str]]]): the default value. Defaults to None.

        Returns:
            Optional[list[Tuple[int, str]]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, list[Tuple[int, str]]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, list[Tuple[int, str]]]]: Iterator over items
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted_by_id(self) -> NodeStateReachability:
        """
        Sort results by node id

        Returns:
             NodeStateReachability: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def values(self) -> Iterator[list[Tuple[int, str]]]:
        """
        Iterate over values

        Returns:
             Iterator[list[Tuple[int, str]]]: Iterator over values
        """

class NodeStateListF64(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def get(self, node: NodeInput, default: Optional[list[float]] = None) -> Optional[list[float]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[list[float]]): the default value. Defaults to None.

        Returns:
            Optional[list[float]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, list[float]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, list[float]]]: Iterator over items
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted_by_id(self) -> NodeStateListF64:
        """
        Sort results by node id

        Returns:
             NodeStateListF64: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def values(self) -> Iterator[list[float]]:
        """
        Iterate over values

        Returns:
             Iterator[list[float]]: Iterator over values
        """

class NodeStateMotifs(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateMotifs:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateMotifs: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[list[int]] = None) -> Optional[list[int]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[list[int]]): the default value. Defaults to None.

        Returns:
            Optional[list[int]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, list[int]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, list[int]]]: Iterator over items
        """

    def max(self) -> Optional[list[int]]:
        """
        Return the maximum value

        Returns:
             Optional[list[int]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, list[int]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[list[int]]:
        """
        Return the median value

        Returns:
             Optional[list[int]]:
        """

    def median_item(self) -> Optional[Tuple[Node, list[int]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[list[int]]:
        """
        Return the minimum value

        Returns:
             Optional[list[int]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, list[int]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateMotifs:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateMotifs: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateMotifs:
        """
        Sort results by node id

        Returns:
             NodeStateMotifs: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateMotifs:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateMotifs: The k largest values as a node state
        """

    def values(self) -> Iterator[list[int]]:
        """
        Iterate over values

        Returns:
             Iterator[list[int]]: Iterator over values
        """

class NodeStateHits(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateHits:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateHits: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[Tuple[float, float]] = None) -> Optional[Tuple[float, float]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Tuple[float, float]]): the default value. Defaults to None.

        Returns:
            Optional[Tuple[float, float]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, Tuple[float, float]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Tuple[float, float]]]: Iterator over items
        """

    def max(self) -> Optional[Tuple[float, float]]:
        """
        Return the maximum value

        Returns:
             Optional[Tuple[float, float]]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Tuple[float, float]]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Tuple[float, float]]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Tuple[float, float]]:
        """
        Return the median value

        Returns:
             Optional[Tuple[float, float]]:
        """

    def median_item(self) -> Optional[Tuple[Node, Tuple[float, float]]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Tuple[float, float]]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Tuple[float, float]]:
        """
        Return the minimum value

        Returns:
             Optional[Tuple[float, float]]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Tuple[float, float]]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Tuple[float, float]]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateHits:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateHits: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateHits:
        """
        Sort results by node id

        Returns:
             NodeStateHits: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateHits:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateHits: The k largest values as a node state
        """

    def values(self) -> Iterator[Tuple[float, float]]:
        """
        Iterate over values

        Returns:
             Iterator[Tuple[float, float]]: Iterator over values
        """

class NodeStateSEIR(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int) -> NodeStateSEIR:
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateSEIR: The k smallest values as a node state
        """

    def get(self, node: NodeInput, default: Optional[Infected] = None) -> Optional[Infected]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Infected]): the default value. Defaults to None.

        Returns:
            Optional[Infected]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, Infected]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Infected]]: Iterator over items
        """

    def max(self) -> Optional[Infected]:
        """
        Return the maximum value

        Returns:
             Optional[Infected]: The maximum value or `None` if empty
        """

    def max_item(self) -> Optional[Tuple[Node, Infected]]:
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Infected]]: The Node and maximum value or `None` if empty
        """

    def median(self) -> Optional[Infected]:
        """
        Return the median value

        Returns:
             Optional[Infected]:
        """

    def median_item(self) -> Optional[Tuple[Node, Infected]]:
        """
        Return median value and corresponding node

        Returns:
             Optional[Tuple[Node, Infected]]: The median value or `None` if empty
        """

    def min(self) -> Optional[Infected]:
        """
        Return the minimum value

        Returns:
             Optional[Infected]: The minimum value or `None` if empty
        """

    def min_item(self) -> Optional[Tuple[Node, Infected]]:
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Infected]]: The Node and minimum value or `None` if empty
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted(self, reverse: bool = False) -> NodeStateSEIR:
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateSEIR: Sorted node state
        """

    def sorted_by_id(self) -> NodeStateSEIR:
        """
        Sort results by node id

        Returns:
             NodeStateSEIR: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def top_k(self, k: int) -> NodeStateSEIR:
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateSEIR: The k largest values as a node state
        """

    def values(self) -> Iterator[Infected]:
        """
        Iterate over values

        Returns:
             Iterator[Infected]: Iterator over values
        """

class NodeLayout(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def get(self, node: NodeInput, default: Optional[list[float]] = None) -> Optional[list[float]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[list[float]]): the default value. Defaults to None.

        Returns:
            Optional[list[float]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, list[float]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, list[float]]]: Iterator over items
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted_by_id(self) -> NodeLayout:
        """
        Sort results by node id

        Returns:
             NodeLayout: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def values(self) -> Iterator[list[float]]:
        """
        Iterate over values

        Returns:
             Iterator[list[float]]: Iterator over values
        """

class NodeStateF64String(object): 

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def get(self, node: NodeInput, default: Optional[Tuple[float, str]] = None) -> Optional[Tuple[float, str]]:
        """
        Get value for node

        Arguments:
            node (NodeInput): the node
            default (Optional[Tuple[float, str]]): the default value. Defaults to None.

        Returns:
            Optional[Tuple[float, str]]: the value for the node or the default value
        """

    def items(self) -> Iterator[Tuple[Node, Tuple[float, str]]]:
        """
        Iterate over items

        Returns:
             Iterator[Tuple[Node, Tuple[float, str]]]: Iterator over items
        """

    def nodes(self) -> Nodes:
        """
        Iterate over nodes

        Returns:
            Nodes: The nodes
        """

    def sorted_by_id(self) -> NodeStateF64String:
        """
        Sort results by node id

        Returns:
             NodeStateF64String: The sorted node state
        """

    def to_df(self) -> DataFrame:
        """
        Convert results to pandas DataFrame

        The DataFrame has two columns, "node" with the node ids and "value" with
        the corresponding values.

        Returns:
            DataFrame: the pandas DataFrame
        """

    def values(self) -> Iterator[Tuple[float, str]]:
        """
        Iterate over values

        Returns:
             Iterator[Tuple[float, str]]: Iterator over values
        """
