###############################################################################
#                                                                             #
#                      AUTOGENERATED TYPE STUB FILE                           #
#                                                                             #
#    This file was automatically generated. Do not modify it directly.        #
#    Any changes made here may be lost when the file is regenerated.          #
#                                                                             #
###############################################################################

from typing import *
from raphtory import *
from raphtory.algorithms import *
from raphtory.vectors import *
from raphtory.node_state import *
from raphtory.graphql import *
from raphtory.typing import *
from datetime import datetime
from pandas import DataFrame

class DegreeView(object):
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def after(self, start: TimeInput):
        """
         Create a view of the DegreeView including all events after `start` (exclusive).

        Arguments:
            start (TimeInput): The start time of the window.

        Returns:
             DegreeView
        """

    def at(self, time: TimeInput):
        """
         Create a view of the DegreeView including all events at `time`.

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             DegreeView
        """

    def before(self, end: TimeInput):
        """
         Create a view of the DegreeView including all events before `end` (exclusive).

        Arguments:
            end (TimeInput): The end time of the window.

        Returns:
             DegreeView
        """

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateUsize
        """

    def collect(self):
        """
        Compute all values and return the result as a list

        Returns
             list[int]
        """

    def compute(self):
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateUsize
        """

    def default_layer(self) -> DegreeView:
        """
         Return a view of DegreeView containing only the default edge layer
        Returns:
             DegreeView: The layered view
        """

    @property
    def end(self):
        """
         Gets the latest time that this DegreeView is valid.

        Returns:
           Optional[int]: The latest time that this DegreeView is valid or None if the DegreeView is valid for all times.
        """

    @property
    def end_date_time(self):
        """
         Gets the latest datetime that this DegreeView is valid

        Returns:
             Optional[Datetime]: The latest datetime that this DegreeView is valid or None if the DegreeView is valid for all times.
        """

    def exclude_layer(self, name: str) -> DegreeView:
        """
         Return a view of DegreeView containing all layers except the excluded `name`
        Errors if any of the layers do not exist.

        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             DegreeView: The layered view
        """

    def exclude_layers(self, names: list[str]) -> DegreeView:
        """
         Return a view of DegreeView containing all layers except the excluded `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             DegreeView: The layered view
        """

    def exclude_valid_layer(self, name: str) -> DegreeView:
        """
         Return a view of DegreeView containing all layers except the excluded `name`
        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             DegreeView: The layered view
        """

    def exclude_valid_layers(self, names: list[str]) -> DegreeView:
        """
         Return a view of DegreeView containing all layers except the excluded `names`
        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             DegreeView: The layered view
        """

    def expanding(self, step: int | str) -> WindowSet:
        """
        Creates a `WindowSet` with the given `step` size using an expanding window.

        An expanding window is a window that grows by `step` size at each iteration.

        Arguments:
            step (int | str): The step size of the window.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def has_layer(self, name: str):
        """
         Check if DegreeView has the layer `"name"`

        Arguments:
            name (str): the name of the layer to check

        Returns:
            bool
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, int]]
        """

    def latest(self):
        """
         Create a view of the DegreeView including all events at the latest time.

        Returns:
             DegreeView
        """

    def layer(self, name: str) -> DegreeView:
        """
         Return a view of DegreeView containing the layer `"name"`
        Errors if the layer does not exist

        Arguments:
            name (str): then name of the layer.

        Returns:
             DegreeView: The layered view
        """

    def layers(self, names: list[str]) -> DegreeView:
        """
         Return a view of DegreeView containing all layers `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             DegreeView: The layered view
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[int]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]
        """

    def mean(self):
        """
        mean of values over all nodes

        Returns:
            float
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[int]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[int]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def rolling(self, window: int | str, step: int | str | None = None) -> WindowSet:
        """
        Creates a `WindowSet` with the given `window` size and optional `step` using a rolling window.

        A rolling window is a window that moves forward by `step` size at each iteration.

        Arguments:
            window (int | str): The size of the window.
            step (int | str | None): The step size of the window.
                `step` defaults to `window`.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def shrink_end(self, end: TimeInput):
        """
        Set the end of the window to the smaller of `end` and `self.end()`

        Arguments:
            end (TimeInput): the new end time of the window
        Returns:
             DegreeView
        """

    def shrink_start(self, start: TimeInput):
        """
        Set the start of the window to the larger of `start` and `self.start()`

        Arguments:
           start (TimeInput): the new start time of the window

        Returns:
             DegreeView
        """

    def shrink_window(self, start: TimeInput, end: TimeInput):
        """
        Shrink both the start and end of the window (same as calling `shrink_start` followed by `shrink_end` but more efficient)

        Arguments:
            start (TimeInput): the new start time for the window
            end (TimeInput): the new end time for the window

        """

    def snapshot_at(self, time: TimeInput):
        """
         Create a view of the DegreeView including all events that have not been explicitly deleted at `time`.

        This is equivalent to `before(time + 1)` for `EventGraph`s and `at(time)` for `PersitentGraph`s

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             DegreeView
        """

    def snapshot_latest(self):
        """
         Create a view of the DegreeView including all events that have not been explicitly deleted at the latest time.

        This is equivalent to a no-op for `EventGraph`s and `latest()` for `PersitentGraph`s

        Returns:
             DegreeView
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateUsize
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateUsize
        """

    @property
    def start(self):
        """
         Gets the start time for rolling and expanding windows for this DegreeView

        Returns:
            Optional[int]: The earliest time that this DegreeView is valid or None if the DegreeView is valid for all times.
        """

    @property
    def start_date_time(self):
        """
         Gets the earliest datetime that this DegreeView is valid

        Returns:
             Optional[Datetime]: The earliest datetime that this DegreeView is valid or None if the DegreeView is valid for all times.
        """

    def sum(self):
        """
        sum of values over all nodes

        Returns:
                int
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateUsize
        """

    def valid_layers(self, names: list[str]) -> DegreeView:
        """
         Return a view of DegreeView containing all layers `names`
        Any layers that do not exist are ignored

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             DegreeView: The layered view
        """

    def values(self):
        """
        Returns:
             Iterator[int]
        """

    def window(self, start: TimeInput | None, end: TimeInput | None):
        """
         Create a view of the DegreeView including all events between `start` (inclusive) and `end` (exclusive)

        Arguments:
            start (TimeInput | None): The start time of the window (unbounded if `None`).
            end (TimeInput | None): The end time of the window (unbounded if `None`).

        Returns:
        r    DegreeView
        """

    @property
    def window_size(self):
        """
         Get the window size (difference between start and end) for this DegreeView

        Returns:
            Optional[int]
        """

class EarliestDateTimeView(object):
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def after(self, start: TimeInput):
        """
         Create a view of the EarliestDateTimeView including all events after `start` (exclusive).

        Arguments:
            start (TimeInput): The start time of the window.

        Returns:
             EarliestDateTimeView
        """

    def at(self, time: TimeInput):
        """
         Create a view of the EarliestDateTimeView including all events at `time`.

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             EarliestDateTimeView
        """

    def before(self, end: TimeInput):
        """
         Create a view of the EarliestDateTimeView including all events before `end` (exclusive).

        Arguments:
            end (TimeInput): The end time of the window.

        Returns:
             EarliestDateTimeView
        """

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime
        """

    def collect(self):
        """
        Compute all values and return the result as a list

        Returns
             list[Optional[Datetime]]
        """

    def compute(self):
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionDateTime
        """

    def default_layer(self) -> EarliestDateTimeView:
        """
         Return a view of EarliestDateTimeView containing only the default edge layer
        Returns:
             EarliestDateTimeView: The layered view
        """

    @property
    def end(self):
        """
         Gets the latest time that this EarliestDateTimeView is valid.

        Returns:
           Optional[int]: The latest time that this EarliestDateTimeView is valid or None if the EarliestDateTimeView is valid for all times.
        """

    @property
    def end_date_time(self):
        """
         Gets the latest datetime that this EarliestDateTimeView is valid

        Returns:
             Optional[Datetime]: The latest datetime that this EarliestDateTimeView is valid or None if the EarliestDateTimeView is valid for all times.
        """

    def exclude_layer(self, name: str) -> EarliestDateTimeView:
        """
         Return a view of EarliestDateTimeView containing all layers except the excluded `name`
        Errors if any of the layers do not exist.

        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             EarliestDateTimeView: The layered view
        """

    def exclude_layers(self, names: list[str]) -> EarliestDateTimeView:
        """
         Return a view of EarliestDateTimeView containing all layers except the excluded `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             EarliestDateTimeView: The layered view
        """

    def exclude_valid_layer(self, name: str) -> EarliestDateTimeView:
        """
         Return a view of EarliestDateTimeView containing all layers except the excluded `name`
        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             EarliestDateTimeView: The layered view
        """

    def exclude_valid_layers(self, names: list[str]) -> EarliestDateTimeView:
        """
         Return a view of EarliestDateTimeView containing all layers except the excluded `names`
        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             EarliestDateTimeView: The layered view
        """

    def expanding(self, step: int | str) -> WindowSet:
        """
        Creates a `WindowSet` with the given `step` size using an expanding window.

        An expanding window is a window that grows by `step` size at each iteration.

        Arguments:
            step (int | str): The step size of the window.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def has_layer(self, name: str):
        """
         Check if EarliestDateTimeView has the layer `"name"`

        Arguments:
            name (str): the name of the layer to check

        Returns:
            bool
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, Optional[Datetime]]]
        """

    def latest(self):
        """
         Create a view of the EarliestDateTimeView including all events at the latest time.

        Returns:
             EarliestDateTimeView
        """

    def layer(self, name: str) -> EarliestDateTimeView:
        """
         Return a view of EarliestDateTimeView containing the layer `"name"`
        Errors if the layer does not exist

        Arguments:
            name (str): then name of the layer.

        Returns:
             EarliestDateTimeView: The layered view
        """

    def layers(self, names: list[str]) -> EarliestDateTimeView:
        """
         Return a view of EarliestDateTimeView containing all layers `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             EarliestDateTimeView: The layered view
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[Optional[Datetime]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[Datetime]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[Optional[Datetime]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[Datetime]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[Optional[Datetime]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[Datetime]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def rolling(self, window: int | str, step: int | str | None = None) -> WindowSet:
        """
        Creates a `WindowSet` with the given `window` size and optional `step` using a rolling window.

        A rolling window is a window that moves forward by `step` size at each iteration.

        Arguments:
            window (int | str): The size of the window.
            step (int | str | None): The step size of the window.
                `step` defaults to `window`.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def shrink_end(self, end: TimeInput):
        """
        Set the end of the window to the smaller of `end` and `self.end()`

        Arguments:
            end (TimeInput): the new end time of the window
        Returns:
             EarliestDateTimeView
        """

    def shrink_start(self, start: TimeInput):
        """
        Set the start of the window to the larger of `start` and `self.start()`

        Arguments:
           start (TimeInput): the new start time of the window

        Returns:
             EarliestDateTimeView
        """

    def shrink_window(self, start: TimeInput, end: TimeInput):
        """
        Shrink both the start and end of the window (same as calling `shrink_start` followed by `shrink_end` but more efficient)

        Arguments:
            start (TimeInput): the new start time for the window
            end (TimeInput): the new end time for the window

        """

    def snapshot_at(self, time: TimeInput):
        """
         Create a view of the EarliestDateTimeView including all events that have not been explicitly deleted at `time`.

        This is equivalent to `before(time + 1)` for `EventGraph`s and `at(time)` for `PersitentGraph`s

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             EarliestDateTimeView
        """

    def snapshot_latest(self):
        """
         Create a view of the EarliestDateTimeView including all events that have not been explicitly deleted at the latest time.

        This is equivalent to a no-op for `EventGraph`s and `latest()` for `PersitentGraph`s

        Returns:
             EarliestDateTimeView
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionDateTime
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateOptionDateTime
        """

    @property
    def start(self):
        """
         Gets the start time for rolling and expanding windows for this EarliestDateTimeView

        Returns:
            Optional[int]: The earliest time that this EarliestDateTimeView is valid or None if the EarliestDateTimeView is valid for all times.
        """

    @property
    def start_date_time(self):
        """
         Gets the earliest datetime that this EarliestDateTimeView is valid

        Returns:
             Optional[Datetime]: The earliest datetime that this EarliestDateTimeView is valid or None if the EarliestDateTimeView is valid for all times.
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime
        """

    def valid_layers(self, names: list[str]) -> EarliestDateTimeView:
        """
         Return a view of EarliestDateTimeView containing all layers `names`
        Any layers that do not exist are ignored

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             EarliestDateTimeView: The layered view
        """

    def values(self):
        """
        Returns:
             Iterator[Optional[Datetime]]
        """

    def window(self, start: TimeInput | None, end: TimeInput | None):
        """
         Create a view of the EarliestDateTimeView including all events between `start` (inclusive) and `end` (exclusive)

        Arguments:
            start (TimeInput | None): The start time of the window (unbounded if `None`).
            end (TimeInput | None): The end time of the window (unbounded if `None`).

        Returns:
        r    EarliestDateTimeView
        """

    @property
    def window_size(self):
        """
         Get the window size (difference between start and end) for this EarliestDateTimeView

        Returns:
            Optional[int]
        """

class EarliestTimeView(object):
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def after(self, start: TimeInput):
        """
         Create a view of the EarliestTimeView including all events after `start` (exclusive).

        Arguments:
            start (TimeInput): The start time of the window.

        Returns:
             EarliestTimeView
        """

    def at(self, time: TimeInput):
        """
         Create a view of the EarliestTimeView including all events at `time`.

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             EarliestTimeView
        """

    def before(self, end: TimeInput):
        """
         Create a view of the EarliestTimeView including all events before `end` (exclusive).

        Arguments:
            end (TimeInput): The end time of the window.

        Returns:
             EarliestTimeView
        """

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionI64
        """

    def collect(self):
        """
        Compute all values and return the result as a list

        Returns
             list[Optional[int]]
        """

    def compute(self):
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionI64
        """

    def default_layer(self) -> EarliestTimeView:
        """
         Return a view of EarliestTimeView containing only the default edge layer
        Returns:
             EarliestTimeView: The layered view
        """

    @property
    def end(self):
        """
         Gets the latest time that this EarliestTimeView is valid.

        Returns:
           Optional[int]: The latest time that this EarliestTimeView is valid or None if the EarliestTimeView is valid for all times.
        """

    @property
    def end_date_time(self):
        """
         Gets the latest datetime that this EarliestTimeView is valid

        Returns:
             Optional[Datetime]: The latest datetime that this EarliestTimeView is valid or None if the EarliestTimeView is valid for all times.
        """

    def exclude_layer(self, name: str) -> EarliestTimeView:
        """
         Return a view of EarliestTimeView containing all layers except the excluded `name`
        Errors if any of the layers do not exist.

        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             EarliestTimeView: The layered view
        """

    def exclude_layers(self, names: list[str]) -> EarliestTimeView:
        """
         Return a view of EarliestTimeView containing all layers except the excluded `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             EarliestTimeView: The layered view
        """

    def exclude_valid_layer(self, name: str) -> EarliestTimeView:
        """
         Return a view of EarliestTimeView containing all layers except the excluded `name`
        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             EarliestTimeView: The layered view
        """

    def exclude_valid_layers(self, names: list[str]) -> EarliestTimeView:
        """
         Return a view of EarliestTimeView containing all layers except the excluded `names`
        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             EarliestTimeView: The layered view
        """

    def expanding(self, step: int | str) -> WindowSet:
        """
        Creates a `WindowSet` with the given `step` size using an expanding window.

        An expanding window is a window that grows by `step` size at each iteration.

        Arguments:
            step (int | str): The step size of the window.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def has_layer(self, name: str):
        """
         Check if EarliestTimeView has the layer `"name"`

        Arguments:
            name (str): the name of the layer to check

        Returns:
            bool
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, Optional[int]]]
        """

    def latest(self):
        """
         Create a view of the EarliestTimeView including all events at the latest time.

        Returns:
             EarliestTimeView
        """

    def layer(self, name: str) -> EarliestTimeView:
        """
         Return a view of EarliestTimeView containing the layer `"name"`
        Errors if the layer does not exist

        Arguments:
            name (str): then name of the layer.

        Returns:
             EarliestTimeView: The layered view
        """

    def layers(self, names: list[str]) -> EarliestTimeView:
        """
         Return a view of EarliestTimeView containing all layers `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             EarliestTimeView: The layered view
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[Optional[int]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[Optional[int]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[Optional[int]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def rolling(self, window: int | str, step: int | str | None = None) -> WindowSet:
        """
        Creates a `WindowSet` with the given `window` size and optional `step` using a rolling window.

        A rolling window is a window that moves forward by `step` size at each iteration.

        Arguments:
            window (int | str): The size of the window.
            step (int | str | None): The step size of the window.
                `step` defaults to `window`.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def shrink_end(self, end: TimeInput):
        """
        Set the end of the window to the smaller of `end` and `self.end()`

        Arguments:
            end (TimeInput): the new end time of the window
        Returns:
             EarliestTimeView
        """

    def shrink_start(self, start: TimeInput):
        """
        Set the start of the window to the larger of `start` and `self.start()`

        Arguments:
           start (TimeInput): the new start time of the window

        Returns:
             EarliestTimeView
        """

    def shrink_window(self, start: TimeInput, end: TimeInput):
        """
        Shrink both the start and end of the window (same as calling `shrink_start` followed by `shrink_end` but more efficient)

        Arguments:
            start (TimeInput): the new start time for the window
            end (TimeInput): the new end time for the window

        """

    def snapshot_at(self, time: TimeInput):
        """
         Create a view of the EarliestTimeView including all events that have not been explicitly deleted at `time`.

        This is equivalent to `before(time + 1)` for `EventGraph`s and `at(time)` for `PersitentGraph`s

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             EarliestTimeView
        """

    def snapshot_latest(self):
        """
         Create a view of the EarliestTimeView including all events that have not been explicitly deleted at the latest time.

        This is equivalent to a no-op for `EventGraph`s and `latest()` for `PersitentGraph`s

        Returns:
             EarliestTimeView
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionI64
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateOptionI64
        """

    @property
    def start(self):
        """
         Gets the start time for rolling and expanding windows for this EarliestTimeView

        Returns:
            Optional[int]: The earliest time that this EarliestTimeView is valid or None if the EarliestTimeView is valid for all times.
        """

    @property
    def start_date_time(self):
        """
         Gets the earliest datetime that this EarliestTimeView is valid

        Returns:
             Optional[Datetime]: The earliest datetime that this EarliestTimeView is valid or None if the EarliestTimeView is valid for all times.
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionI64
        """

    def valid_layers(self, names: list[str]) -> EarliestTimeView:
        """
         Return a view of EarliestTimeView containing all layers `names`
        Any layers that do not exist are ignored

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             EarliestTimeView: The layered view
        """

    def values(self):
        """
        Returns:
             Iterator[Optional[int]]
        """

    def window(self, start: TimeInput | None, end: TimeInput | None):
        """
         Create a view of the EarliestTimeView including all events between `start` (inclusive) and `end` (exclusive)

        Arguments:
            start (TimeInput | None): The start time of the window (unbounded if `None`).
            end (TimeInput | None): The end time of the window (unbounded if `None`).

        Returns:
        r    EarliestTimeView
        """

    @property
    def window_size(self):
        """
         Get the window size (difference between start and end) for this EarliestTimeView

        Returns:
            Optional[int]
        """

class HistoryDateTimeView(object):
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def after(self, start: TimeInput):
        """
         Create a view of the HistoryDateTimeView including all events after `start` (exclusive).

        Arguments:
            start (TimeInput): The start time of the window.

        Returns:
             HistoryDateTimeView
        """

    def at(self, time: TimeInput):
        """
         Create a view of the HistoryDateTimeView including all events at `time`.

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             HistoryDateTimeView
        """

    def before(self, end: TimeInput):
        """
         Create a view of the HistoryDateTimeView including all events before `end` (exclusive).

        Arguments:
            end (TimeInput): The end time of the window.

        Returns:
             HistoryDateTimeView
        """

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionListDateTime
        """

    def collect(self):
        """
        Compute all values and return the result as a list

        Returns
             list[Optional[list[Datetime]]]
        """

    def compute(self):
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionListDateTime
        """

    def default_layer(self) -> HistoryDateTimeView:
        """
         Return a view of HistoryDateTimeView containing only the default edge layer
        Returns:
             HistoryDateTimeView: The layered view
        """

    @property
    def end(self):
        """
         Gets the latest time that this HistoryDateTimeView is valid.

        Returns:
           Optional[int]: The latest time that this HistoryDateTimeView is valid or None if the HistoryDateTimeView is valid for all times.
        """

    @property
    def end_date_time(self):
        """
         Gets the latest datetime that this HistoryDateTimeView is valid

        Returns:
             Optional[Datetime]: The latest datetime that this HistoryDateTimeView is valid or None if the HistoryDateTimeView is valid for all times.
        """

    def exclude_layer(self, name: str) -> HistoryDateTimeView:
        """
         Return a view of HistoryDateTimeView containing all layers except the excluded `name`
        Errors if any of the layers do not exist.

        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             HistoryDateTimeView: The layered view
        """

    def exclude_layers(self, names: list[str]) -> HistoryDateTimeView:
        """
         Return a view of HistoryDateTimeView containing all layers except the excluded `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             HistoryDateTimeView: The layered view
        """

    def exclude_valid_layer(self, name: str) -> HistoryDateTimeView:
        """
         Return a view of HistoryDateTimeView containing all layers except the excluded `name`
        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             HistoryDateTimeView: The layered view
        """

    def exclude_valid_layers(self, names: list[str]) -> HistoryDateTimeView:
        """
         Return a view of HistoryDateTimeView containing all layers except the excluded `names`
        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             HistoryDateTimeView: The layered view
        """

    def expanding(self, step: int | str) -> WindowSet:
        """
        Creates a `WindowSet` with the given `step` size using an expanding window.

        An expanding window is a window that grows by `step` size at each iteration.

        Arguments:
            step (int | str): The step size of the window.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def has_layer(self, name: str):
        """
         Check if HistoryDateTimeView has the layer `"name"`

        Arguments:
            name (str): the name of the layer to check

        Returns:
            bool
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, Optional[list[Datetime]]]]
        """

    def latest(self):
        """
         Create a view of the HistoryDateTimeView including all events at the latest time.

        Returns:
             HistoryDateTimeView
        """

    def layer(self, name: str) -> HistoryDateTimeView:
        """
         Return a view of HistoryDateTimeView containing the layer `"name"`
        Errors if the layer does not exist

        Arguments:
            name (str): then name of the layer.

        Returns:
             HistoryDateTimeView: The layered view
        """

    def layers(self, names: list[str]) -> HistoryDateTimeView:
        """
         Return a view of HistoryDateTimeView containing all layers `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             HistoryDateTimeView: The layered view
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[Optional[list[Datetime]]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[Datetime]]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[Optional[list[Datetime]]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[Datetime]]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[Optional[list[Datetime]]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[Datetime]]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def rolling(self, window: int | str, step: int | str | None = None) -> WindowSet:
        """
        Creates a `WindowSet` with the given `window` size and optional `step` using a rolling window.

        A rolling window is a window that moves forward by `step` size at each iteration.

        Arguments:
            window (int | str): The size of the window.
            step (int | str | None): The step size of the window.
                `step` defaults to `window`.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def shrink_end(self, end: TimeInput):
        """
        Set the end of the window to the smaller of `end` and `self.end()`

        Arguments:
            end (TimeInput): the new end time of the window
        Returns:
             HistoryDateTimeView
        """

    def shrink_start(self, start: TimeInput):
        """
        Set the start of the window to the larger of `start` and `self.start()`

        Arguments:
           start (TimeInput): the new start time of the window

        Returns:
             HistoryDateTimeView
        """

    def shrink_window(self, start: TimeInput, end: TimeInput):
        """
        Shrink both the start and end of the window (same as calling `shrink_start` followed by `shrink_end` but more efficient)

        Arguments:
            start (TimeInput): the new start time for the window
            end (TimeInput): the new end time for the window

        """

    def snapshot_at(self, time: TimeInput):
        """
         Create a view of the HistoryDateTimeView including all events that have not been explicitly deleted at `time`.

        This is equivalent to `before(time + 1)` for `EventGraph`s and `at(time)` for `PersitentGraph`s

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             HistoryDateTimeView
        """

    def snapshot_latest(self):
        """
         Create a view of the HistoryDateTimeView including all events that have not been explicitly deleted at the latest time.

        This is equivalent to a no-op for `EventGraph`s and `latest()` for `PersitentGraph`s

        Returns:
             HistoryDateTimeView
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionListDateTime
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateOptionListDateTime
        """

    @property
    def start(self):
        """
         Gets the start time for rolling and expanding windows for this HistoryDateTimeView

        Returns:
            Optional[int]: The earliest time that this HistoryDateTimeView is valid or None if the HistoryDateTimeView is valid for all times.
        """

    @property
    def start_date_time(self):
        """
         Gets the earliest datetime that this HistoryDateTimeView is valid

        Returns:
             Optional[Datetime]: The earliest datetime that this HistoryDateTimeView is valid or None if the HistoryDateTimeView is valid for all times.
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionListDateTime
        """

    def valid_layers(self, names: list[str]) -> HistoryDateTimeView:
        """
         Return a view of HistoryDateTimeView containing all layers `names`
        Any layers that do not exist are ignored

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             HistoryDateTimeView: The layered view
        """

    def values(self):
        """
        Returns:
             Iterator[Optional[list[Datetime]]]
        """

    def window(self, start: TimeInput | None, end: TimeInput | None):
        """
         Create a view of the HistoryDateTimeView including all events between `start` (inclusive) and `end` (exclusive)

        Arguments:
            start (TimeInput | None): The start time of the window (unbounded if `None`).
            end (TimeInput | None): The end time of the window (unbounded if `None`).

        Returns:
        r    HistoryDateTimeView
        """

    @property
    def window_size(self):
        """
         Get the window size (difference between start and end) for this HistoryDateTimeView

        Returns:
            Optional[int]
        """

class HistoryView(object):
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def after(self, start: TimeInput):
        """
         Create a view of the HistoryView including all events after `start` (exclusive).

        Arguments:
            start (TimeInput): The start time of the window.

        Returns:
             HistoryView
        """

    def at(self, time: TimeInput):
        """
         Create a view of the HistoryView including all events at `time`.

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             HistoryView
        """

    def before(self, end: TimeInput):
        """
         Create a view of the HistoryView including all events before `end` (exclusive).

        Arguments:
            end (TimeInput): The end time of the window.

        Returns:
             HistoryView
        """

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListI64
        """

    def collect(self):
        """
        Compute all values and return the result as a list

        Returns
             list[list[int]]
        """

    def compute(self):
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateListI64
        """

    def default_layer(self) -> HistoryView:
        """
         Return a view of HistoryView containing only the default edge layer
        Returns:
             HistoryView: The layered view
        """

    @property
    def end(self):
        """
         Gets the latest time that this HistoryView is valid.

        Returns:
           Optional[int]: The latest time that this HistoryView is valid or None if the HistoryView is valid for all times.
        """

    @property
    def end_date_time(self):
        """
         Gets the latest datetime that this HistoryView is valid

        Returns:
             Optional[Datetime]: The latest datetime that this HistoryView is valid or None if the HistoryView is valid for all times.
        """

    def exclude_layer(self, name: str) -> HistoryView:
        """
         Return a view of HistoryView containing all layers except the excluded `name`
        Errors if any of the layers do not exist.

        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             HistoryView: The layered view
        """

    def exclude_layers(self, names: list[str]) -> HistoryView:
        """
         Return a view of HistoryView containing all layers except the excluded `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             HistoryView: The layered view
        """

    def exclude_valid_layer(self, name: str) -> HistoryView:
        """
         Return a view of HistoryView containing all layers except the excluded `name`
        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             HistoryView: The layered view
        """

    def exclude_valid_layers(self, names: list[str]) -> HistoryView:
        """
         Return a view of HistoryView containing all layers except the excluded `names`
        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             HistoryView: The layered view
        """

    def expanding(self, step: int | str) -> WindowSet:
        """
        Creates a `WindowSet` with the given `step` size using an expanding window.

        An expanding window is a window that grows by `step` size at each iteration.

        Arguments:
            step (int | str): The step size of the window.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def has_layer(self, name: str):
        """
         Check if HistoryView has the layer `"name"`

        Arguments:
            name (str): the name of the layer to check

        Returns:
            bool
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, list[int]]]
        """

    def latest(self):
        """
         Create a view of the HistoryView including all events at the latest time.

        Returns:
             HistoryView
        """

    def layer(self, name: str) -> HistoryView:
        """
         Return a view of HistoryView containing the layer `"name"`
        Errors if the layer does not exist

        Arguments:
            name (str): then name of the layer.

        Returns:
             HistoryView: The layered view
        """

    def layers(self, names: list[str]) -> HistoryView:
        """
         Return a view of HistoryView containing all layers `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             HistoryView: The layered view
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[list[int]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[list[int]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[list[int]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def rolling(self, window: int | str, step: int | str | None = None) -> WindowSet:
        """
        Creates a `WindowSet` with the given `window` size and optional `step` using a rolling window.

        A rolling window is a window that moves forward by `step` size at each iteration.

        Arguments:
            window (int | str): The size of the window.
            step (int | str | None): The step size of the window.
                `step` defaults to `window`.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def shrink_end(self, end: TimeInput):
        """
        Set the end of the window to the smaller of `end` and `self.end()`

        Arguments:
            end (TimeInput): the new end time of the window
        Returns:
             HistoryView
        """

    def shrink_start(self, start: TimeInput):
        """
        Set the start of the window to the larger of `start` and `self.start()`

        Arguments:
           start (TimeInput): the new start time of the window

        Returns:
             HistoryView
        """

    def shrink_window(self, start: TimeInput, end: TimeInput):
        """
        Shrink both the start and end of the window (same as calling `shrink_start` followed by `shrink_end` but more efficient)

        Arguments:
            start (TimeInput): the new start time for the window
            end (TimeInput): the new end time for the window

        """

    def snapshot_at(self, time: TimeInput):
        """
         Create a view of the HistoryView including all events that have not been explicitly deleted at `time`.

        This is equivalent to `before(time + 1)` for `EventGraph`s and `at(time)` for `PersitentGraph`s

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             HistoryView
        """

    def snapshot_latest(self):
        """
         Create a view of the HistoryView including all events that have not been explicitly deleted at the latest time.

        This is equivalent to a no-op for `EventGraph`s and `latest()` for `PersitentGraph`s

        Returns:
             HistoryView
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateListI64
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateListI64
        """

    @property
    def start(self):
        """
         Gets the start time for rolling and expanding windows for this HistoryView

        Returns:
            Optional[int]: The earliest time that this HistoryView is valid or None if the HistoryView is valid for all times.
        """

    @property
    def start_date_time(self):
        """
         Gets the earliest datetime that this HistoryView is valid

        Returns:
             Optional[Datetime]: The earliest datetime that this HistoryView is valid or None if the HistoryView is valid for all times.
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListI64
        """

    def valid_layers(self, names: list[str]) -> HistoryView:
        """
         Return a view of HistoryView containing all layers `names`
        Any layers that do not exist are ignored

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             HistoryView: The layered view
        """

    def values(self):
        """
        Returns:
             Iterator[list[int]]
        """

    def window(self, start: TimeInput | None, end: TimeInput | None):
        """
         Create a view of the HistoryView including all events between `start` (inclusive) and `end` (exclusive)

        Arguments:
            start (TimeInput | None): The start time of the window (unbounded if `None`).
            end (TimeInput | None): The end time of the window (unbounded if `None`).

        Returns:
        r    HistoryView
        """

    @property
    def window_size(self):
        """
         Get the window size (difference between start and end) for this HistoryView

        Returns:
            Optional[int]
        """

class IdView(object):
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateGID
        """

    def collect(self):
        """
        Compute all values and return the result as a list

        Returns
             list[GID]
        """

    def compute(self):
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateGID
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, GID]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[GID]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[GID]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[GID]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateGID
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateGID
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateGID
        """

    def values(self):
        """
        Returns:
             Iterator[GID]
        """

class LatestDateTimeView(object):
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def after(self, start: TimeInput):
        """
         Create a view of the LatestDateTimeView including all events after `start` (exclusive).

        Arguments:
            start (TimeInput): The start time of the window.

        Returns:
             LatestDateTimeView
        """

    def at(self, time: TimeInput):
        """
         Create a view of the LatestDateTimeView including all events at `time`.

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             LatestDateTimeView
        """

    def before(self, end: TimeInput):
        """
         Create a view of the LatestDateTimeView including all events before `end` (exclusive).

        Arguments:
            end (TimeInput): The end time of the window.

        Returns:
             LatestDateTimeView
        """

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime
        """

    def collect(self):
        """
        Compute all values and return the result as a list

        Returns
             list[Optional[Datetime]]
        """

    def compute(self):
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionDateTime
        """

    def default_layer(self) -> LatestDateTimeView:
        """
         Return a view of LatestDateTimeView containing only the default edge layer
        Returns:
             LatestDateTimeView: The layered view
        """

    @property
    def end(self):
        """
         Gets the latest time that this LatestDateTimeView is valid.

        Returns:
           Optional[int]: The latest time that this LatestDateTimeView is valid or None if the LatestDateTimeView is valid for all times.
        """

    @property
    def end_date_time(self):
        """
         Gets the latest datetime that this LatestDateTimeView is valid

        Returns:
             Optional[Datetime]: The latest datetime that this LatestDateTimeView is valid or None if the LatestDateTimeView is valid for all times.
        """

    def exclude_layer(self, name: str) -> LatestDateTimeView:
        """
         Return a view of LatestDateTimeView containing all layers except the excluded `name`
        Errors if any of the layers do not exist.

        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             LatestDateTimeView: The layered view
        """

    def exclude_layers(self, names: list[str]) -> LatestDateTimeView:
        """
         Return a view of LatestDateTimeView containing all layers except the excluded `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             LatestDateTimeView: The layered view
        """

    def exclude_valid_layer(self, name: str) -> LatestDateTimeView:
        """
         Return a view of LatestDateTimeView containing all layers except the excluded `name`
        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             LatestDateTimeView: The layered view
        """

    def exclude_valid_layers(self, names: list[str]) -> LatestDateTimeView:
        """
         Return a view of LatestDateTimeView containing all layers except the excluded `names`
        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             LatestDateTimeView: The layered view
        """

    def expanding(self, step: int | str) -> WindowSet:
        """
        Creates a `WindowSet` with the given `step` size using an expanding window.

        An expanding window is a window that grows by `step` size at each iteration.

        Arguments:
            step (int | str): The step size of the window.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def has_layer(self, name: str):
        """
         Check if LatestDateTimeView has the layer `"name"`

        Arguments:
            name (str): the name of the layer to check

        Returns:
            bool
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, Optional[Datetime]]]
        """

    def latest(self):
        """
         Create a view of the LatestDateTimeView including all events at the latest time.

        Returns:
             LatestDateTimeView
        """

    def layer(self, name: str) -> LatestDateTimeView:
        """
         Return a view of LatestDateTimeView containing the layer `"name"`
        Errors if the layer does not exist

        Arguments:
            name (str): then name of the layer.

        Returns:
             LatestDateTimeView: The layered view
        """

    def layers(self, names: list[str]) -> LatestDateTimeView:
        """
         Return a view of LatestDateTimeView containing all layers `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             LatestDateTimeView: The layered view
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[Optional[Datetime]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[Datetime]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[Optional[Datetime]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[Datetime]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[Optional[Datetime]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[Datetime]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def rolling(self, window: int | str, step: int | str | None = None) -> WindowSet:
        """
        Creates a `WindowSet` with the given `window` size and optional `step` using a rolling window.

        A rolling window is a window that moves forward by `step` size at each iteration.

        Arguments:
            window (int | str): The size of the window.
            step (int | str | None): The step size of the window.
                `step` defaults to `window`.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def shrink_end(self, end: TimeInput):
        """
        Set the end of the window to the smaller of `end` and `self.end()`

        Arguments:
            end (TimeInput): the new end time of the window
        Returns:
             LatestDateTimeView
        """

    def shrink_start(self, start: TimeInput):
        """
        Set the start of the window to the larger of `start` and `self.start()`

        Arguments:
           start (TimeInput): the new start time of the window

        Returns:
             LatestDateTimeView
        """

    def shrink_window(self, start: TimeInput, end: TimeInput):
        """
        Shrink both the start and end of the window (same as calling `shrink_start` followed by `shrink_end` but more efficient)

        Arguments:
            start (TimeInput): the new start time for the window
            end (TimeInput): the new end time for the window

        """

    def snapshot_at(self, time: TimeInput):
        """
         Create a view of the LatestDateTimeView including all events that have not been explicitly deleted at `time`.

        This is equivalent to `before(time + 1)` for `EventGraph`s and `at(time)` for `PersitentGraph`s

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             LatestDateTimeView
        """

    def snapshot_latest(self):
        """
         Create a view of the LatestDateTimeView including all events that have not been explicitly deleted at the latest time.

        This is equivalent to a no-op for `EventGraph`s and `latest()` for `PersitentGraph`s

        Returns:
             LatestDateTimeView
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionDateTime
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateOptionDateTime
        """

    @property
    def start(self):
        """
         Gets the start time for rolling and expanding windows for this LatestDateTimeView

        Returns:
            Optional[int]: The earliest time that this LatestDateTimeView is valid or None if the LatestDateTimeView is valid for all times.
        """

    @property
    def start_date_time(self):
        """
         Gets the earliest datetime that this LatestDateTimeView is valid

        Returns:
             Optional[Datetime]: The earliest datetime that this LatestDateTimeView is valid or None if the LatestDateTimeView is valid for all times.
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime
        """

    def valid_layers(self, names: list[str]) -> LatestDateTimeView:
        """
         Return a view of LatestDateTimeView containing all layers `names`
        Any layers that do not exist are ignored

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             LatestDateTimeView: The layered view
        """

    def values(self):
        """
        Returns:
             Iterator[Optional[Datetime]]
        """

    def window(self, start: TimeInput | None, end: TimeInput | None):
        """
         Create a view of the LatestDateTimeView including all events between `start` (inclusive) and `end` (exclusive)

        Arguments:
            start (TimeInput | None): The start time of the window (unbounded if `None`).
            end (TimeInput | None): The end time of the window (unbounded if `None`).

        Returns:
        r    LatestDateTimeView
        """

    @property
    def window_size(self):
        """
         Get the window size (difference between start and end) for this LatestDateTimeView

        Returns:
            Optional[int]
        """

class LatestTimeView(object):
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def after(self, start: TimeInput):
        """
         Create a view of the LatestTimeView including all events after `start` (exclusive).

        Arguments:
            start (TimeInput): The start time of the window.

        Returns:
             LatestTimeView
        """

    def at(self, time: TimeInput):
        """
         Create a view of the LatestTimeView including all events at `time`.

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             LatestTimeView
        """

    def before(self, end: TimeInput):
        """
         Create a view of the LatestTimeView including all events before `end` (exclusive).

        Arguments:
            end (TimeInput): The end time of the window.

        Returns:
             LatestTimeView
        """

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionI64
        """

    def collect(self):
        """
        Compute all values and return the result as a list

        Returns
             list[Optional[int]]
        """

    def compute(self):
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionI64
        """

    def default_layer(self) -> LatestTimeView:
        """
         Return a view of LatestTimeView containing only the default edge layer
        Returns:
             LatestTimeView: The layered view
        """

    @property
    def end(self):
        """
         Gets the latest time that this LatestTimeView is valid.

        Returns:
           Optional[int]: The latest time that this LatestTimeView is valid or None if the LatestTimeView is valid for all times.
        """

    @property
    def end_date_time(self):
        """
         Gets the latest datetime that this LatestTimeView is valid

        Returns:
             Optional[Datetime]: The latest datetime that this LatestTimeView is valid or None if the LatestTimeView is valid for all times.
        """

    def exclude_layer(self, name: str) -> LatestTimeView:
        """
         Return a view of LatestTimeView containing all layers except the excluded `name`
        Errors if any of the layers do not exist.

        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             LatestTimeView: The layered view
        """

    def exclude_layers(self, names: list[str]) -> LatestTimeView:
        """
         Return a view of LatestTimeView containing all layers except the excluded `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             LatestTimeView: The layered view
        """

    def exclude_valid_layer(self, name: str) -> LatestTimeView:
        """
         Return a view of LatestTimeView containing all layers except the excluded `name`
        Arguments:
            name (str): layer name that is excluded for the new view

        Returns:
             LatestTimeView: The layered view
        """

    def exclude_valid_layers(self, names: list[str]) -> LatestTimeView:
        """
         Return a view of LatestTimeView containing all layers except the excluded `names`
        Arguments:
            names (list[str]): list of layer names that are excluded for the new view

        Returns:
             LatestTimeView: The layered view
        """

    def expanding(self, step: int | str) -> WindowSet:
        """
        Creates a `WindowSet` with the given `step` size using an expanding window.

        An expanding window is a window that grows by `step` size at each iteration.

        Arguments:
            step (int | str): The step size of the window.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def has_layer(self, name: str):
        """
         Check if LatestTimeView has the layer `"name"`

        Arguments:
            name (str): the name of the layer to check

        Returns:
            bool
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, Optional[int]]]
        """

    def latest(self):
        """
         Create a view of the LatestTimeView including all events at the latest time.

        Returns:
             LatestTimeView
        """

    def layer(self, name: str) -> LatestTimeView:
        """
         Return a view of LatestTimeView containing the layer `"name"`
        Errors if the layer does not exist

        Arguments:
            name (str): then name of the layer.

        Returns:
             LatestTimeView: The layered view
        """

    def layers(self, names: list[str]) -> LatestTimeView:
        """
         Return a view of LatestTimeView containing all layers `names`
        Errors if any of the layers do not exist.

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             LatestTimeView: The layered view
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[Optional[int]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[Optional[int]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[Optional[int]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[int]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def rolling(self, window: int | str, step: int | str | None = None) -> WindowSet:
        """
        Creates a `WindowSet` with the given `window` size and optional `step` using a rolling window.

        A rolling window is a window that moves forward by `step` size at each iteration.

        Arguments:
            window (int | str): The size of the window.
            step (int | str | None): The step size of the window.
                `step` defaults to `window`.

        Returns:
            WindowSet: A `WindowSet` object.
        """

    def shrink_end(self, end: TimeInput):
        """
        Set the end of the window to the smaller of `end` and `self.end()`

        Arguments:
            end (TimeInput): the new end time of the window
        Returns:
             LatestTimeView
        """

    def shrink_start(self, start: TimeInput):
        """
        Set the start of the window to the larger of `start` and `self.start()`

        Arguments:
           start (TimeInput): the new start time of the window

        Returns:
             LatestTimeView
        """

    def shrink_window(self, start: TimeInput, end: TimeInput):
        """
        Shrink both the start and end of the window (same as calling `shrink_start` followed by `shrink_end` but more efficient)

        Arguments:
            start (TimeInput): the new start time for the window
            end (TimeInput): the new end time for the window

        """

    def snapshot_at(self, time: TimeInput):
        """
         Create a view of the LatestTimeView including all events that have not been explicitly deleted at `time`.

        This is equivalent to `before(time + 1)` for `EventGraph`s and `at(time)` for `PersitentGraph`s

        Arguments:
            time (TimeInput): The time of the window.

        Returns:
             LatestTimeView
        """

    def snapshot_latest(self):
        """
         Create a view of the LatestTimeView including all events that have not been explicitly deleted at the latest time.

        This is equivalent to a no-op for `EventGraph`s and `latest()` for `PersitentGraph`s

        Returns:
             LatestTimeView
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionI64
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateOptionI64
        """

    @property
    def start(self):
        """
         Gets the start time for rolling and expanding windows for this LatestTimeView

        Returns:
            Optional[int]: The earliest time that this LatestTimeView is valid or None if the LatestTimeView is valid for all times.
        """

    @property
    def start_date_time(self):
        """
         Gets the earliest datetime that this LatestTimeView is valid

        Returns:
             Optional[Datetime]: The earliest datetime that this LatestTimeView is valid or None if the LatestTimeView is valid for all times.
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionI64
        """

    def valid_layers(self, names: list[str]) -> LatestTimeView:
        """
         Return a view of LatestTimeView containing all layers `names`
        Any layers that do not exist are ignored

        Arguments:
            names (list[str]): list of layer names for the new view

        Returns:
             LatestTimeView: The layered view
        """

    def values(self):
        """
        Returns:
             Iterator[Optional[int]]
        """

    def window(self, start: TimeInput | None, end: TimeInput | None):
        """
         Create a view of the LatestTimeView including all events between `start` (inclusive) and `end` (exclusive)

        Arguments:
            start (TimeInput | None): The start time of the window (unbounded if `None`).
            end (TimeInput | None): The end time of the window (unbounded if `None`).

        Returns:
        r    LatestTimeView
        """

    @property
    def window_size(self):
        """
         Get the window size (difference between start and end) for this LatestTimeView

        Returns:
            Optional[int]
        """

class NameView(object):
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateString
        """

    def collect(self):
        """
        Compute all values and return the result as a list

        Returns
             list[str]
        """

    def compute(self):
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateString
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, str]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[str]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[str]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[str]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateString
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateString
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateString
        """

    def values(self):
        """
        Returns:
             Iterator[str]
        """

class NodeStateGID(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateGID
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, GID]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[GID]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[GID]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[GID]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, GID]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateGID
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateGID
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateGID
        """

    def values(self):
        """
        Returns:
             Iterator[GID]
        """

class NodeStateListDateTime(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListDateTime
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, list[Datetime]]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[list[Datetime]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[Datetime]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[list[Datetime]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, list[Datetime]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[list[Datetime]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[Datetime]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateListDateTime
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateListDateTime
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListDateTime
        """

    def values(self):
        """
        Returns:
             Iterator[list[Datetime]]
        """

class NodeStateListI64(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListI64
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, list[int]]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[list[int]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[list[int]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[list[int]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, list[int]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateListI64
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateListI64
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateListI64
        """

    def values(self):
        """
        Returns:
             Iterator[list[int]]
        """

class NodeStateOptionDateTime(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, Optional[Datetime]]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[Optional[Datetime]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[Datetime]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[Optional[Datetime]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[Datetime]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[Optional[Datetime]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[Datetime]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionDateTime
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateOptionDateTime
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionDateTime
        """

    def values(self):
        """
        Returns:
             Iterator[Optional[Datetime]]
        """

class NodeStateOptionListDateTime(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionListDateTime
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, Optional[list[Datetime]]]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[Optional[list[Datetime]]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[Datetime]]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[Optional[list[Datetime]]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[Datetime]]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[Optional[list[Datetime]]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[list[Datetime]]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionListDateTime
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateOptionListDateTime
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionListDateTime
        """

    def values(self):
        """
        Returns:
             Iterator[Optional[list[Datetime]]]
        """

class NodeStateOptionStr(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionStr
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, Optional[str]]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[Optional[str]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[Optional[str]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[Optional[str]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionStr
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateOptionStr
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionStr
        """

    def values(self):
        """
        Returns:
             Iterator[Optional[str]]
        """

class NodeStateString(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateString
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, str]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[str]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[str]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[str]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, str]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateString
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateString
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateString
        """

    def values(self):
        """
        Returns:
             Iterator[str]
        """

class NodeStateU64(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateU64
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, int]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[int]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]
        """

    def mean(self):
        """
        mean of values over all nodes

        Returns:
            float
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[int]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[int]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateU64
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateU64
        """

    def sum(self):
        """
        sum of values over all nodes

        Returns:
                int
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateU64
        """

    def values(self):
        """
        Returns:
             Iterator[int]
        """

class NodeStateUsize(object):
    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateUsize
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, int]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[int]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]
        """

    def mean(self):
        """
        mean of values over all nodes

        Returns:
            float
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[int]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[int]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, int]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateUsize
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateUsize
        """

    def sum(self):
        """
        sum of values over all nodes

        Returns:
                int
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateUsize
        """

    def values(self):
        """
        Returns:
             Iterator[int]
        """

class NodeTypeView(object):
    """A lazy view over node values"""

    def __eq__(self, value):
        """Return self==value."""

    def __ge__(self, value):
        """Return self>=value."""

    def __getitem__(self, key):
        """Return self[key]."""

    def __gt__(self, value):
        """Return self>value."""

    def __iter__(self):
        """Implement iter(self)."""

    def __le__(self, value):
        """Return self<=value."""

    def __len__(self):
        """Return len(self)."""

    def __lt__(self, value):
        """Return self<value."""

    def __ne__(self, value):
        """Return self!=value."""

    def __repr__(self):
        """Return repr(self)."""

    def bottom_k(self, k: int):
        """
        Compute the k smallest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionStr
        """

    def collect(self):
        """
        Compute all values and return the result as a list

        Returns
             list[Optional[str]]
        """

    def compute(self):
        """
        Compute all values and return the result as a node view

        Returns:
             NodeStateOptionStr
        """

    def items(self):
        """
        Returns:
             Iterator[Tuple[Node, Optional[str]]]
        """

    def max(self):
        """
        Return the maximum value

        Returns:
             Optional[Optional[str]]
        """

    def max_item(self):
        """
        Return largest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]
        """

    def median(self):
        """
        Return the median value

        Returns:
             Optional[Optional[str]]
        """

    def median_item(self):
        """
        Return medain value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]
        """

    def min(self):
        """
        Return the minimum value

        Returns:
             Optional[Optional[str]]
        """

    def min_item(self):
        """
        Return smallest value and corresponding node

        Returns:
             Optional[Tuple[Node, Optional[str]]]
        """

    def nodes(self):
        """
        Iterate over nodes

        Returns:
            Iterator[Node]
        """

    def sorted(self, reverse: bool = False):
        """
        Sort by value

        Arguments:
            reverse (bool): If `True`, sort in descending order, otherwise ascending. Defaults to False.

        Returns:
             NodeStateOptionStr
        """

    def sorted_by_id(self):
        """
        Sort results by node id

        Returns:
             NodeStateOptionStr
        """

    def top_k(self, k: int):
        """
        Compute the k largest values

        Arguments:
            k (int): The number of values to return

        Returns:
             NodeStateOptionStr
        """

    def values(self):
        """
        Returns:
             Iterator[Optional[str]]
        """
