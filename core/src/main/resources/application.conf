raphtory {
  data {
    containsDeletions       = true
    containsDeletions       = ${?RAPHTORY_DATA_CONTAINSDELETIONS}
  }
  pulsar {
    broker {
      address               = "pulsar://localhost:6650"
      address               = ${?RAPHTORY_PULSAR_BROKER_ADDRESS}

      ioThreads = 4
      listenerThreads = 2
    }
    admin {
      address               = "http://127.0.0.1:8080"
      address               = ${?RAPHTORY_PULSAR_ADMIN_ADDRESS}
    }
    retention {
      time                  = 0
      time                  = ${?RAPHTORY_RETENTION_TIME}
      size                  = 0
      size                  = ${?RAPHTORY_RETENTION_SIZE}

    }
    topics {
      spoutOutput {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_SPOUT_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_SPOUT_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_SPOUT_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_SPOUT_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_SPOUT_PERSISTENCE}
      }
      graphUpdates {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_GRAPH_UPDATES_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_GRAPH_UPDATES_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_GRAPH_UPDATES_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_GRAPH_UPDATES_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_GRAPH_UPDATES_PERSISTENCE}

      }
      graphSync {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_GRAPH_SYNC_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_GRAPH_SYNC_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_GRAPH_SYNC_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_GRAPH_SYNC_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_GRAPH_SYNC_PERSISTENCE}

      }
      submissions {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_SUBMISSIONS_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_SUBMISSIONS_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_SUBMISSIONS_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_SUBMISSIONS_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_SUBMISSIONS_PERSISTENCE}

      }
      endedQueries {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_ENDED_QUERIES_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_ENDED_QUERIES_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_ENDED_QUERIES_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_ENDED_QUERIES_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_ENDED_QUERIES_PERSISTENCE}

      }
      watermark {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_WATERMARK_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_WATERMARK_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_WATERMARK_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_WATERMARK_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_WATERMARK_PERSISTENCE}

      }
      queryPrep {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_QUERY_PREP_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_QUERY_PREP_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_QUERY_PREP_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_QUERY_PREP_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_QUERY_PREP_PERSISTENCE}

      }

      queryTrack {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_QUERY_TRACK_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_QUERY_TRACK_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_QUERY_TRACK_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_QUERY_TRACK_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_QUERY_TRACK_PERSISTENCE}

      }
      rechecks {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_RECHECKS_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_RECHECKS_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_RECHECKS_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_RECHECKS_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_RECHECKS_PERSISTENCE}

      }
      jobStatus {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_JOB_STATUS_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_JOB_STATUS_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_JOB_STATUS_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_JOB_STATUS_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_JOB_STATUS_PERSISTENCE}

      }
      vertexMessages {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_VERTEX_MESSAGES_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_VERTEX_MESSAGES_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_VERTEX_MESSAGES_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_VERTEX_MESSAGES_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_VERTEX_MESSAGES_PERSISTENCE}

      }
      jobOperations {
        tenant                  = "public"
        tenant                  = ${?RAPHTORY_TENANT}
        tenant                  = ${?RAPHTORY_SPOUT_TENANT}
        namespace               = ${raphtory.deploy.id}
        namespace               = ${?RAPHTORY_NAMESPACE}
        namespace               = ${?RAPHTORY_SPOUT_NAMESPACE}
        retentionTime           = ${raphtory.pulsar.retention.time}
        retentionTime           = ${?RAPHTORY_SPOUT_RETENTION_TIME}
        retentionSize           = ${raphtory.pulsar.retention.size}
        retentionSize           = ${?RAPHTORY_SPOUT_RETENTION_SIZE}
        persistence             = true
        persistence             = ${?RAPHTORY_SPOUT_PERSISTENCE}

      }
    }
  }

  prometheus {
    metrics {
      port = 9999
    }
    namespaces {
      spout         = "spout"
      reader        = "reader"
      writer        = "writer"
      query         = "query"
      storage       = "storage"
      builder       = "graph_builder"
    }
  }

  python {
   gatewayFilePath      = "/tmp/"${raphtory.deploy.id}"_python_gateway_connection_file"
  }

  zookeeper {
    address                 = "127.0.0.1:2181"
    address                 = ${?RAPHTORY_ZOOKEEPER_ADDRESS}
  }
  query {
    status                  = "NO QUERY TO EXECUTE"
    timeFormat              = "yyyy-MM-dd[ HH:mm:ss[.SSS]]"
    timeFormat              = ${?RAPHTORY_QUERY_TIMEFORMAT}
  }
  spout {
    topic                   = "raphtory_data_raw"
    topic                   = ${?RAPHTORY_SPOUT_TOPIC}
    copyFiles               = ${?RAPHTORY_SPOUT_COPY_FILES}
    failOnError             = true
    failOnError             = ${?RAPHTORY_SPOUT_FAIL_ON_ERROR}
    twitter {
        local {
          accessToken = ""
          accessToken = ${?RAPHTORY_SPOUT_ACCESSTOKEN}
          accessTokenSecret = ""
          accessTokenSecret = ${?RAPHTORY_SPOUT_ACCESSTOKENSECRET}
          apiKey = ""
          apiKey = ${?RAPHTORY_SPOUT_APIKEY}
          apiSecretKey = ""
          apiSecretKey = ${?RAPHTORY_SPOUT_APISECRETKEY}
          hashtag = ""
          hashtag = ${?RAPHTORY_SPOUT_HASHTAG}
          tag = "test"
          tag = ${?RAPHTORY_SPOUT_TAG}
          enableRetweetFilter = false
          enableRetweetFilter = ${?RAPHTORY_SPOUT_RETWEETFILTER}
          setLanguage = ""
          setLanguage = ${?RAPHTORY_SPOUT_SETLANGUAGE}
        }
      }
    file {
      local {
        fileFilter              = "^.*\\.([cC][sS][vV]??)$"
        fileFilter              = ${?RAPHTORY_SPOUT_FILEFILTER}
        recurse                 = false
        recurse                 = ${?RAPHTORY_SPOUT_RECURSE}
        outputDirectory         = "/tmp/"${raphtory.deploy.id}"/"${raphtory.spout.topic}
        outputDirectory         = ${?RAPHTORY_SPOUT_OUTPUTDIRECTORY}
        sourceDirectory         = "/tmp"
        sourceDirectory         = ${?RAPHTORY_SPOUT_SOURCEDIRECTORY}
        reread                  = false
        reread                  = ${?RAPHTORY_SPOUT_REREAD}
      }
    }
  }
  builders {
    countPerServer          = 1
    countPerServer          = ${?RAPHTORY_BUILDERS_COUNTPERSERVER}
    failOnError             = true
    failOnError             = ${?RAPHTORY_BUILDERS_FAIL_ON_ERROR}
  }
  partitions {
    serverCount             = 1
    serverCount             = ${?RAPHTORY_PARTITIONS_SERVERCOUNT}
    countPerServer          = 4
    countPerServer          = ${?RAPHTORY_PARTITIONS_COUNTPERSERVER}
    batchMessages           = true
    batchMessages           = ${?RAPHTORY_PARTITIONS_BATCHMESSAGES}
    maxMessageBatchSize     = 10000
    maxMessageBatchSize     = ${?RAPHTORY_PARTITIONS_BATCHSIZE}
    failOnError             = true
    failOnError             = ${?RAPHTORY_PARTITIONS_FAIL_ON_ERROR}
  }
  deploy {
    id                      = "raphtory"
    id                      = ${?RAPHTORY_DEPLOY_ID}
    distributed             = false
    distributed             = ${?RAPHTORY_DEPLOY_DISTRIBUTED}
    kubernetes {
      master {
        url                 = "https://kubernetes.master.url"
        url                 = ${?RAPHTORY_DEPLOY_KUBERNETES_MASTER_URL}
      }
      secrets {
        registry {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_CREATE}
          delete            = false
          delete            = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_DELETE}
          name              = "raphtory-docker-registry"
          name              = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_NAME}
          server            = "docker.repository.url/repo"
          server            = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_SERVER}
          username          = "username"
          username          = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_USERNAME}
          password          = "password"
          password          = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_PASSWORD}
          email             = "password"
          email             = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_EMAIL}
        }
      }
      namespace {
        create              = true
        create              = ${?RAPHTORY_DEPLOY_KUBERNETES_NAMESPACE_CREATE}
        delete              = false
        delete              = ${?RAPHTORY_DEPLOY_KUBERNETES_NAMESPACE_DELETE}
        name                = "raphtory"
        name                = ${?RAPHTORY_DEPLOY_KUBERNETES_NAMESPACE_NAME}
      }
      serviceaccount {
        create              = false
        create              = ${?RAPHTORY_DEPLOY_KUBERNETES_SERVICEACCOUNT_CREATE}
        delete              = false
        delete              = ${?RAPHTORY_DEPLOY_KUBERNETES_SERVICEACCOUNT_DELETE}
        name                = "raphtory-sa"
        name                = ${?RAPHTORY_DEPLOY_KUBERNETES_SERVICEACCOUNT_NAME}
      }
      deployments {
        all {
          pods {
            env {}
          }
        }
        spout {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_PORT}
            replicas        = 1
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_REPLICAS}
            env             = {}
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_INGRESS_CREATE}
          }
        }
        builder {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_PORT}
            replicas        = 4
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_REPLICAS}
            env             = {}
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_INGRESS_CREATE}
          }
        }
        partitionmanager {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_PORT}
            replicas        = 4
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_REPLICAS}
            env             = {}
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_INGRESS_CREATE}
          }
        }
        querymanager {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_PORT}
            replicas        = 1
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_REPLICAS}
            env             = {}
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_INGRESS_CREATE}
          }
        }
      }
    }
  }
}
