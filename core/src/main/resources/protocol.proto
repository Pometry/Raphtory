syntax = "proto3";

package com.raphtory;

import "google/protobuf/wrappers.proto";
import "scalapb/scalapb.proto";
import "google/protobuf/empty.proto";

// Responses
message Status {
  bool success = 1;
}

message QueryManagement {
//  option (scalapb.message).extends = "com.raphtory.internals.components.querymanager.ProtoDef";
//  option (scalapb.message).type = "com.raphtory.internals.components.querymanager.QueryManagement";
  bytes bytes = 1 [(scalapb.field).type = "com.raphtory.internals.components.querymanager.QueryManagement"];
}

message OptionalId {
  google.protobuf.Int32Value id = 1;
}

// Requests
message GraphInfo {
  string clientId = 1;
  string graphId = 2;
}

message Query {
//  option (scalapb.message).extends = "com.raphtory.internals.components.querymanager.ProtoDef";
//  option (scalapb.message).type = "com.raphtory.internals.components.querymanager.Query";
  bytes bytes = 1 [(scalapb.field).type = "com.raphtory.internals.components.querymanager.TryQuery"];
}

message IngestData {
  //  option (scalapb.message).extends = "com.raphtory.internals.components.querymanager.ProtoDef";
  //  option (scalapb.message).type = "com.raphtory.internals.components.querymanager.IngestData";
  bytes bytes = 1 [(scalapb.field).type = "com.raphtory.internals.components.querymanager.TryIngestData"];
}

message IdPool {
  string pool = 1;
}

message GraphUpdate {
  string graphId = 1;
  bytes update = 2 [(scalapb.field).type = "com.raphtory.internals.graph.GraphAlteration.GraphUpdate"];
}

message DestroyGraph {
  string clientId = 1;
  string graphId = 2;
  bool force = 3;
}

message GetGraph {
  string graphID = 1;
}

// Services
service RaphtoryService {
  rpc establishGraph(GraphInfo) returns (Status);
  rpc getGraph(GetGraph) returns (Status);
  rpc submitQuery(Query) returns (stream QueryManagement);
  rpc submitSource(IngestData) returns (Status);
  rpc disconnect(GraphInfo) returns (Status);
  rpc destroyGraph(DestroyGraph) returns (Status);
  rpc getNextAvailableId(IdPool) returns (OptionalId);
  rpc processUpdate(GraphUpdate) returns (Status);
  rpc unblockIngestion(UnblockIngestion) returns (Status);
}

service IngestionService {
  rpc establishGraph(GraphInfo) returns (Status);
  rpc destroyGraph(GraphInfo) returns (Status);
  rpc ingestData(IngestData) returns (Status);
}

service PartitionService {
  rpc establishGraph(GraphInfo) returns (Status);
  rpc destroyGraph(GraphInfo) returns (Status);
  rpc establishExecutor(Query) returns (Status);
}

message BlockIngestion {
  int32 sourceID = 1;
  string graphID = 2;
}

message UnblockIngestion {
  string graphID = 1;
  int32 sourceID = 2;
  int64 earliestTimeSeen = 3;
  int64 latestTimeSeen = 4;
}

message JobID {
  string JobID = 1;
}

service QueryService {
  rpc establishGraph(GraphInfo) returns (Status);
  rpc destroyGraph(GraphInfo) returns (Status);
  rpc blockIngestion(BlockIngestion) returns (google.protobuf.Empty);
  rpc unblockIngestion(UnblockIngestion) returns (google.protobuf.Empty);
  rpc submitQuery(Query) returns (google.protobuf.Empty);
  rpc endQuery(JobID) returns (google.protobuf.Empty);
}
