syntax = "proto3";

package com.raphtory;

import "google/protobuf/wrappers.proto";
import "scalapb/scalapb.proto";
import "google/protobuf/empty.proto";

// Response messages
message Status {
  bool success = 1;
}

message OptionalId {
  google.protobuf.Int32Value id = 1;
}

message PartitionResult {
  repeated bytes rows = 3 [(scalapb.field).type = "com.raphtory.api.analysis.table.Row"];
}

message OperationResult {
  bool voteToContinue = 1;
}

message OperationWithStateResult {
  bool voteToContinue = 1;
  bytes state = 2 [(scalapb.field).type = "com.raphtory.api.analysis.graphstate.GraphStateImplementation"];
}

message QueryUpdate {
  oneof sealed_value {
    PerspectiveCompleted perspectiveCompleted = 1;
    PerspectiveFailed perspectiveFailed = 2;
    QueryCompleted queryCompleted = 3;
    QueryFailed queryFailed = 4;
  }
}

message PerspectiveCompleted {
  bytes perspective = 1 [(scalapb.field).type = "com.raphtory.internals.graph.Perspective"];
  repeated bytes rows = 2[(scalapb.field).type = "com.raphtory.api.analysis.table.Row"];
}

message PerspectiveFailed {
  bytes perspective = 1 [(scalapb.field).type = "com.raphtory.internals.graph.Perspective"];
  string reason = 2;
}

message QueryCompleted {}

message QueryFailed {
  string reason = 1;
}

// Requests
message GraphInfo {
  string clientId = 1;
  string graphId = 2;
}

message Query {
  //  option (scalapb.message).extends = "com.raphtory.internals.components.querymanager.ProtoDef";
  //  option (scalapb.message).type = "com.raphtory.internals.components.querymanager.Query";
  bytes bytes = 1 [(scalapb.field).type = "com.raphtory.internals.components.querymanager.TryQuery"];
}

message IngestData {
  //  option (scalapb.message).extends = "com.raphtory.internals.components.querymanager.ProtoDef";
  //  option (scalapb.message).type = "com.raphtory.internals.components.querymanager.IngestData";
  bytes bytes = 1 [(scalapb.field).type = "com.raphtory.internals.components.querymanager.TryIngestData"];
}

message IdPool {
  string pool = 1;
}

message GraphUpdate {
  string graphId = 1;
  bytes update = 2 [(scalapb.field).type = "com.raphtory.internals.graph.GraphAlteration.GraphUpdate"];
}

message GraphAlteration {
  bytes alteration = 1 [(scalapb.field).type = "com.raphtory.internals.graph.GraphAlteration"];
}

message GraphAlterations {
  string graphId = 1;
  repeated GraphAlteration alterations = 2;
}

message DestroyGraph {
  string clientId = 1;
  string graphId = 2;
  bool force = 3;
}

message GraphId {
  string graphID = 1;
}

message QueryId {
  string graphId = 1;
  string jobId = 2;
}

message PerspectiveCommand {
  string graphId = 1;
  string jobId = 2;
  bytes perspective = 3 [(scalapb.field).type = "com.raphtory.internals.graph.Perspective"];
}

message Operation {
  string graphId = 1;
  string jobId = 2;
  int32 number = 3;
}

message OperationAndState {
  string GraphId = 1;
  string jobId = 2;
  int32 number = 3;
  bytes state = 4 [(scalapb.field).type = "com.raphtory.api.analysis.graphstate.GraphStateImplementation"];
}

message VertexMessages {
  string graphId = 1;
  string jobId = 2;
  repeated bytes messages = 3 [(scalapb.field).type = "com.raphtory.internals.components.querymanager.VertexMessaging"];
}

message StartIngestion {
  int32 sourceID = 1;
  string graphID = 2;
}

message EndIngestion {
  string graphID = 1;
  int32 sourceID = 2;
  int64 earliestTimeSeen = 3;
  int64 latestTimeSeen = 4;
}

message JobID {
  string JobID = 1;
}

// Bidirectional

message NodeCount {
  string graphId = 1;
  string jobId = 2;
  int32 count = 3;
}

// Services
service RaphtoryService {
  rpc establishGraph(GraphInfo) returns (Status);
  rpc connectToGraph(GraphInfo) returns (google.protobuf.Empty);
  rpc submitQuery(Query) returns (stream QueryUpdate);
  rpc submitSource(IngestData) returns (Status);
  rpc disconnect(GraphInfo) returns (Status);
  rpc destroyGraph(DestroyGraph) returns (Status);
  rpc getNextAvailableId(IdPool) returns (OptionalId);
  rpc processUpdate(GraphUpdate) returns (Status);
}

service IngestionService {
  rpc establishGraph(GraphInfo) returns (Status);
  rpc destroyGraph(GraphInfo) returns (Status);
  rpc ingestData(IngestData) returns (Status);
}

service PartitionService {
  rpc establishGraph(GraphInfo) returns (Status);
  rpc destroyGraph(GraphInfo) returns (Status);
  rpc establishExecutor(Query) returns (Status);
  rpc processUpdates(GraphAlterations) returns (google.protobuf.Empty);
  rpc receiveMessages(VertexMessages) returns (google.protobuf.Empty);
  rpc establishPerspective(PerspectiveCommand) returns (NodeCount);
  rpc setMetadata(NodeCount) returns (google.protobuf.Empty);
  rpc executeOperation(Operation) returns (OperationResult);
  rpc executeOperationWithState(OperationAndState) returns (OperationWithStateResult);
  rpc getResult(QueryId) returns (PartitionResult);
  rpc writePerspective(PerspectiveCommand) returns (google.protobuf.Empty);
  rpc endQuery(QueryId) returns (google.protobuf.Empty);
  rpc flush(GraphId) returns (google.protobuf.Empty);
}

service QueryService {
  rpc establishGraph(GraphInfo) returns (Status);
  rpc destroyGraph(GraphInfo) returns (Status);
  rpc startIngestion(StartIngestion) returns (google.protobuf.Empty);
  rpc endIngestion(EndIngestion) returns (google.protobuf.Empty);
  rpc submitQuery(Query) returns (stream QueryUpdate);
}
