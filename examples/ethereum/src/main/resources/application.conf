raphtory {
  data {
    containsDeletions       = true
    containsDeletions       = ${?RAPHTORY_DATA_CONTAINSDELETIONS}
  }
  pulsar {
    broker {
      address               = "pulsar://localhost:6650"
      address               = ${?RAPHTORY_PULSAR_BROKER_ADDRESS}

      ioThreads = 4
      listenerThreads = 2
    }
    admin {
      address               = "http://127.0.0.1:8080"
      address               = ${?RAPHTORY_PULSAR_ADMIN_ADDRESS}
    }
    retention {
      time                  = 0
      time                  = ${?RAPHTORY_RETENTION_TIME}
      size                  = 0
      size                  = ${?RAPHTORY_RETENTION_SIZE}

    }
  }
  zookeeper {
    address                 = "127.0.0.1:2181"
    address                 = ${?RAPHTORY_ZOOKEEPER_ADDRESS}
  }
  query {
    status                  = "NO QUERY TO EXECUTE"
    tenant                  = "public"
    tenant                  = ${?RAPHTORY_TENANT}
    tenant                  = ${?RAPHTORY_QUERY_TENANT}
    namespace               = ${raphtory.graph.id}
    namespace               = ${?RAPHTORY_NAMESPACE}
    namespace               = ${?RAPHTORY_QUERY_NAMESPACE}
    retentionTime           = ${raphtory.pulsar.retention.time}
    retentionSize           = ${raphtory.pulsar.retention.size}
    persistence             = true
    persistence             = ${?RAPHTORY_QUERY_PERSISTENCE}
  }
  spout {
    topic                   = "raphtory_data_raw"
    topic                   = ${?RAPHTORY_SPOUT_TOPIC}
    tenant                  = "public"
    tenant                  = ${?RAPHTORY_TENANT}
    tenant                  = ${?RAPHTORY_SPOUT_TENANT}
    namespace               = ${raphtory.graph.id}
    namespace               = ${?RAPHTORY_NAMESPACE}
    namespace               = ${?RAPHTORY_SPOUT_NAMESPACE}
    retentionTime           = ${raphtory.pulsar.retention.time}
    retentionTime           = ${?RAPHTORY_SPOUT_RETENTION_TIME}
    retentionSize           = ${raphtory.pulsar.retention.size}
    retentionSize           = ${?RAPHTORY_SPOUT_RETENTION_SIZE}
    persistence             = true
    persistence             = ${?RAPHTORY_SPOUT_PERSISTENCE}
    copyFiles               = ${?RAPHTORY_SPOUT_COPY_FILES}
    failOnError             = true
    failOnError             = ${?RAPHTORY_SPOUT_FAIL_ON_ERROR}
    file {
      local {
        fileFilter              = "^.*\\.([gG][zZ]??)$"
        fileFilter              = ${?RAPHTORY_SPOUT_FILEFILTER}
        recurse                 = false
        recurse                 = ${?RAPHTORY_SPOUT_RECURSE}
        outputDirectory         = "/tmp/"${raphtory.graph.id}"/"${raphtory.spout.topic}
        outputDirectory         = ${?RAPHTORY_SPOUT_OUTPUTDIRECTORY}
        sourceDirectory         = "/tmp/data"
        sourceDirectory         = ${?RAPHTORY_SPOUT_SOURCEDIRECTORY}
        reread                  = false
        reread                  = ${?RAPHTORY_SPOUT_REREAD}
      }
    }
  }
  builders {
    tenant                  = "public"
    tenant                  = ${?RAPHTORY_TENANT}
    tenant                  = ${?RAPHTORY_BUILDERS_TENANT}
    namespace               = ${raphtory.graph.id}
    namespace               = ${?RAPHTORY_NAMESPACE}
    namespace               = ${?RAPHTORY_BUILDERS_NAMESPACE}
    retentionTime           = ${raphtory.pulsar.retention.time}
    retentionTime           = ${?RAPHTORY_BUILDERS_RETENTION_TIME}
    retentionSize           = ${raphtory.pulsar.retention.size}
    retentionSize           = ${?RAPHTORY_BUILDERS_RETENTION_SIZE}
    persistence             = true
    persistence             = ${?RAPHTORY_BUILDERS_PERSISTENCE}
    failOnError             = true
    failOnError             = ${?RAPHTORY_BUILDERS_FAIL_ON_ERROR}
  }
  partitions {
    serverCount             = 1
    serverCount             = ${?RAPHTORY_PARTITIONS_SERVERCOUNT}
    countPerServer          = 4
    countPerServer          = ${?RAPHTORY_PARTITIONS_COUNTPERSERVER}
    batchMessages           = true
    batchMessages           = ${?RAPHTORY_PARTITIONS_BATCHMESSAGES}
    maxMessageBatchSize     = 10000
    maxMessageBatchSize     = ${?RAPHTORY_PARTITIONS_BATCHSIZE}
    failOnError             = true
    failOnError             = ${?RAPHTORY_PARTITIONS_FAIL_ON_ERROR}
  }
  deploy {
    id                      = "raphtory"
    id                      = ${?RAPHTORY_DEPLOY_ID}
    distributed             = false
    distributed             = ${?RAPHTORY_DEPLOY_DISTRIBUTED}
    kubernetes {
      master {
        url                 = "https://kubernetes.master.url"
        url                 = ${?RAPHTORY_DEPLOY_KUBERNETES_MASTER_URL}
      }
      secrets {
        registry {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_CREATE}
          delete            = false
          delete            = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_DELETE}
          name              = "raphtory-docker-registry"
          name              = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_NAME}
          server            = "docker.repository.url/repo"
          server            = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_SERVER}
          username          = "username"
          username          = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_USERNAME}
          password          = "password"
          password          = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_PASSWORD}
          email             = "password"
          email             = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_EMAIL}
        }
      }
      namespace {
        create              = true
        create              = ${?RAPHTORY_DEPLOY_KUBERNETES_NAMESPACE_CREATE}
        delete              = false
        delete              = ${?RAPHTORY_DEPLOY_KUBERNETES_NAMESPACE_DELETE}
        name                = "raphtory"
        name                = ${?RAPHTORY_DEPLOY_KUBERNETES_NAMESPACE_NAME}
      }
      serviceaccount {
        create              = false
        create              = ${?RAPHTORY_DEPLOY_KUBERNETES_SERVICEACCOUNT_CREATE}
        delete              = false
        delete              = ${?RAPHTORY_DEPLOY_KUBERNETES_SERVICEACCOUNT_DELETE}
        name                = "raphtory-sa"
        name                = ${?RAPHTORY_DEPLOY_KUBERNETES_SERVICEACCOUNT_NAME}
      }
      deployments {
        all {
          pods {
            env {}
          }
        }
        spout {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_PORT}
            replicas        = 1
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_REPLICAS}
            env             = {}
            resources {
              requests {
                memory {
                  amount = "33"
                  format = "Gi"
                }
                cpu {
                  amount    = null
                  format    = null
                }
              }
              limits {
                memory {
                  amount = "50"
                  format = "Gi"
                }
                cpu {
                  amount    = null
                  format    = null
                }
              }
            }
            affinity {
              enabled      = false
              type         = requiredDuringSchedulingIgnoredDuringExecution
              topology_key = "kubernetes.io/hostname"
              match_labels = Map("a" -> "b")
            }
            antiAffinity {
              enabled      = false
              type         = requiredDuringSchedulingIgnoredDuringExecution
              topology_key = "kubernetes.io/hostname"
              match_labels = Map("a" -> "b")
            }
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_INGRESS_CREATE}
          }
        }
        builder {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_PORT}
            replicas        = 4
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_REPLICAS}
            env             = {}
            resources {
              requests {
                memory {
                  amount = "33"
                  format = "Gi"
                }
                cpu {
                  amount    = null
                  format    = null
                }
              }
              limits {
                memory {
                  amount = "50"
                  format = "Gi"
                }
                cpu {
                  amount    = null
                  format    = null
                }
              }
            }
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_INGRESS_CREATE}
          }
        }
        partitionmanager {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_PORT}
            replicas        = 4
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_REPLICAS}
            env             = {}
            resources {
              requests {
                memory {
                  amount = "33"
                  format = "Gi"
                }
                cpu {
                  amount    = null
                  format    = null
                }
              }
              limits {
                memory {
                  amount = "50"
                  format = "Gi"
                }
                cpu {
                  amount    = null
                  format    = null
                }
              }
            }
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_INGRESS_CREATE}
          }
        }
        querymanager {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_PORT}
            replicas        = 1
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_REPLICAS}
            env             = {}
            resources {
              requests {
                memory {
                  amount = "33"
                  format = "Gi"
                }
                cpu {
                  amount    = null
                  format    = null
                }
              }
              limits {
                memory {
                  amount = "50"
                  format = "Gi"
                }
                cpu {
                  amount    = null
                  format    = null
                }
              }
            }
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_INGRESS_CREATE}
          }
        }
      }
    }
  }
}
