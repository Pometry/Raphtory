raphtory {
  deploy {
    kubernetes {
      id                    = "raphtory"
      id                    = ${?RAPHTORY_DEPLOY_KUBERNETES_ID}
      master {
        url                 = "https://kubernetes.master.url"
        url                 = ${?RAPHTORY_DEPLOY_KUBERNETES_MASTER_URL}
      }
      secrets {
        registry {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_CREATE}
          delete            = false
          delete            = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_DELETE}
          name              = "raphtory-docker-registry"
          name              = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_NAME}
          server            = "docker.repository.url/repo"
          server            = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_SERVER}
          username          = "username"
          username          = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_USERNAME}
          password          = "password"
          password          = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_PASSWORD}
          email             = "password"
          email             = ${?RAPHTORY_DEPLOY_KUBERNETES_SECRETS_REGISTRY_EMAIL}
        }
      }
      namespace {
        create              = true
        create              = ${?RAPHTORY_DEPLOY_KUBERNETES_NAMESPACE_CREATE}
        delete              = false
        delete              = ${?RAPHTORY_DEPLOY_KUBERNETES_NAMESPACE_DELETE}
        name                = "raphtory"
        name                = ${?RAPHTORY_DEPLOY_KUBERNETES_NAMESPACE_NAME}
      }
      serviceaccount {
        create              = false
        create              = ${?RAPHTORY_DEPLOY_KUBERNETES_SERVICEACCOUNT_CREATE}
        delete              = false
        delete              = ${?RAPHTORY_DEPLOY_KUBERNETES_SERVICEACCOUNT_DELETE}
        name                = "raphtory-sa"
        name                = ${?RAPHTORY_DEPLOY_KUBERNETES_SERVICEACCOUNT_NAME}
      }
      deployments {
        all {
          pods {
            env {}
          }
        }
        spout {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_PORT}
            replicas        = 1
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_PODS_REPLICAS}
            env             = {}
            resources       = {}
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_SPOUT_INGRESS_CREATE}
          }
        }
        builder {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_PORT}
            replicas        = 4
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_PODS_REPLICAS}
            env             = {}
            resources       = {}
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_BUILDER_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_INGRESS_CREATE}
          }
        }
        partitionmanager {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_PORT}
            replicas        = 4
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_PODS_REPLICAS}
            env             = {}
            resources       = {}
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_PARTITIONMANAGER_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_INGRESS_CREATE}
          }
        }
        querymanager {
          create            = true
          create            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_CREATE}
          pods {
            image           = "docker.repository.url/repo/image:tag",
            image           = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_IMAGE}
            imagePullPolicy = "Always",
            imagePullPolicy = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_IMAGEPULLPOLICY}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_PORT}
            replicas        = 1
            replicas        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_PODS_REPLICAS}
            env             = {}
            resources       = {}
          }
          service {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_CREATE}
            portName        = "tcp"
            portName        = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_PORT_NAME}
            portProtocol    = "TCP"
            portProtocol    = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_PORT_PROTOCOL}
            port            = 80
            port            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_PORT}
            targetPort      = 8091
            targetPort      = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_TARGET_PORT}
            type            = "ClusterIP"
            type            = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_SERVICE_TYPE}
          }
          ingress {
            create          = false
            create          = ${?RAPHTORY_DEPLOY_KUBERNETES_DEPLOYMENTS_QUERYMANAGER_INGRESS_CREATE}
          }
        }
      }
    }
  }
}
