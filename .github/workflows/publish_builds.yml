name: Publish All Builds to Github
on:
  workflow_call:
    inputs:
      config-path:
        required: false
        type: string

jobs:
  publishBuild:
    name: "Build and Publish"
    strategy:
      fail-fast: false
      matrix:
        runners: [ubuntu-latest]
        containers: ["eclipse-temurin:11.0.12_7-jdk"]
        python-version: ["3.9"]
        sbt: [1.6.2]
    runs-on: ${{ matrix.runners }}
    container:
      image: ${{ matrix.containers }}
    steps:
      # Checkout the code
      - name: Print Branch input name
        run: echo running on ref branch ${{ github.ref }}
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      # Install SBT
      - name: Get sbt package
        run: apt-get update && apt-get install unzip && curl -L "https://github.com/sbt/sbt/releases/download/v1.5.5/sbt-1.5.5.zip" -o sbt-1.5.5.zip && unzip sbt-1.5.5.zip
      # Create Raphtory thin jars and build python
      - name: Building Thin Raphtory Jars for Python
        run: |
          export PATH=$(pwd)/sbt/bin:$PATH
          apt-get update && apt-get install make
          echo "core / Compile / logLevel := Level.Error" >> build.sbt
          echo "deploy / Compile / logLevel := Level.Error" >> build.sbt
          make gh-sbt-build
      - name: Setting up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Installing poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
      - name: Building pyraphtory_jvm
        run: cd python/pyraphtory_jvm && python setup.py sdist
      - name: Building pyraphtory
        run: cd python/pyraphtory && poetry build
      - name: Building Fat Scala Jars (sbt assembly)
        run: |
          export PATH=$(pwd)/sbt/bin:$PATH
          echo "core / Compile / logLevel := Level.Error" >> build.sbt
          echo "deploy / Compile / logLevel := Level.Error" >> build.sbt
          sbt clean && sbt core/assembly && sbt arrowCore/assembly && sbt arrowMessaging/assembly
      # Get artifacts
      - name: Copy Jar & Python artifacts to folder
        run: | 
          mkdir artifacts
          find './core/target' './arrow-core/target' './arrow-messaging/target' -type f \(  -name 'core-assembly-*.jar' -o -name 'arrow-core-assembly-*.jar' -o -name 'arrow-messaging-assembly-*.jar' \) -exec cp {} artifacts \;
          cp python/pyraphtory_jvm/dist/*.gz artifacts/
          cp python/pyraphtory/dist/*.gz artifacts/
      # Create release and upload the artifacts to release
      - name: Create release and upload artifacts
        uses: ncipollo/release-action@v1
        with:
          tag:  ${{ github.ref }}
          name: ${GITHUB_REF##*/}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: "./artifacts/*.*"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          removeArtifacts: true
          replacesArtifacts: true

