name: Test Raphtory in both Scala and Python
on:
  workflow_call:
    inputs:
      config-path:
        required: false
        type: string

jobs:
  test:
    name: "test_scala_python"
    strategy:
      fail-fast: false
      matrix:
        runners: [ubuntu-latest]
        containers: ["eclipse-temurin:11.0.17_8-jdk-jammy"]
        sbt: [1.6.2]
    runs-on: ${{ matrix.runners }}
    container:
      image: ${{ matrix.containers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get sbt package
        run: |
          apt update
          apt install -y unzip 
          curl -L "https://github.com/sbt/sbt/releases/download/v${{ matrix.sbt }}/sbt-${{ matrix.sbt }}.zip" -o sbt-${{ matrix.sbt }}.zip && unzip sbt-${{ matrix.sbt }}.zip
      - name: Run Core tests via sbt
        run: |
          export PATH=$(pwd)/sbt/bin:$PATH
          export RAPHTORY_CORE_LOG="ERROR"
          sbt "core/test"
      - name: Run Arrow tests via sbt
        run: |
          export PATH=$(pwd)/sbt/bin:$PATH
          export RAPHTORY_CORE_LOG="ERROR"
          sbt "arrowCore/test"
      - name: Run Connectors tests
        run: |
          export PATH=$(pwd)/sbt/bin:$PATH
          export RAPHTORY_CORE_LOG="ERROR"
          sbt "connectorsAWS/test"
          sbt "connectorsTwitter/test"
          sbt "connectorsTypeDB/test"
        timeout-minutes: 10
      - name: Build Raphtory Jars
        run: |
          export PATH=$(pwd)/sbt/bin:$PATH
          apt-get update && apt-get install make
          echo "core / Compile / logLevel := Level.Error" >> build.sbt
          echo "deploy / Compile / logLevel := Level.Error" >> build.sbt
          make gh-sbt-build
      - name: Setup Python
        run: |
          cat /etc/*release
          apt install -y python3 libpython3.10 python3-pip python3-distutils python3-venv virtualenv
          ln -s /usr/lib/x86_64-linux-gnu/libpython3.10.so.1 /usr/lib/x86_64-linux-gnu/libpython3.so
          python3 -m venv $(pwd)/venv
      - name: Install poetry and nbmake
        run: |
          export PATH="$(pwd)/venv/bin:$PATH"
          python -m pip install --upgrade pip
          python -m pip install poetry nbmake tox pytest-xdist
      - name: Install pyraphtory_jvm
        run: |
          export PATH="$(pwd)/venv/bin:$PATH"
          cd python/pyraphtory_jvm && python setup.py sdist && python -m pip install dist/pyraphtory_jvm-*.tar.gz
      - name: Run pyraphtory_jvm test fam
        run: |
          export PATH="$(pwd)/venv/bin:$PATH"
          cd python/pyraphtory_jvm && tox -p -o
      - name: Install pyraphtory
        run: |
          export PATH="$(pwd)/venv/bin:$PATH"
          ls -ltr python/pyraphtory/lib
          cd python/pyraphtory && poetry --verbose build && poetry --verbose install && pip install dist/pyraphtory*.tar.gz
      - name: Summary of pyraphtory install
        run: |
          export PATH="$(pwd)/venv/bin:$PATH"
          ls -ltr $(python3 -c "from pyraphtory_jvm.jre import get_local_ivy_loc; print(get_local_ivy_loc())")/compile
          ls -ltr $(python3 -c "import site; print(site.getsitepackages()[0] + '/lib/')")
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Integration test docker image
        uses: docker/build-push-action@v3
        with:
          push: false
          build-args: |
            DEP_JAR_PATH=./venv/lib/python3.10/site-packages/pyraphtory_jvm/data/lib/compile
            CORE_JAR_PATH=./python/pyraphtory/lib
            VENV=./venv
          context: .
          file: Dockerfile-gh
          tags: raphtory-core-it:latest
      - name: Run pyraphtory tests
        run: |
          export PATH="$(pwd)/venv/bin:$PATH"
          cd python/pyraphtory && poetry run pytest -n=auto
        timeout-minutes: 10
      - name: Run notebook tests
        run: |
          export PATH="$(pwd)/venv/bin:$PATH"
          cd examples && pytest --nbmake -n=auto
      - name: Run doc compile check
        run: |
          export PATH="$(pwd)/venv/bin:$PATH"
          export PATH=$(pwd)/sbt/bin:$PATH
          apt install -y pandoc python3-sphinx
          cd docs && python -m pip install -r requirements.txt && make html
    if: needs.configure.outputs.type == 'regular'
