name: _Release 3 - Publish python to pypi
on:
  workflow_call:
    inputs:
      base:
        description: 'Name of branch to open PR against'
        type: 'string'
        required: true
      dry_run:
        description: 'DRY RUN: If true will not publish the release and will not push anything to PyPi/crates.io. However it will still make a PR and a branch to show you what it changed'
        type: boolean
        required: true

jobs:
  python-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ x86_64, aarch64 ]
    steps:
      - name: "Check if user has write access"
        uses: "lannonbr/repo-permission-check-action@2.0.0"
        with:
          permission: "write"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}        
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.base }}
      - uses: actions/setup-python@v4
        with:
          python-version: |
            3.8
            3.9
            3.10
            3.11
            3.12
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./python
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist -i python3.8 -i python3.9 -i python3.10 -i python3.11 -i python3.12
          manylinux: 2_28
          before-script-linux: |
            if [[ -f /etc/os-release ]]; then
              . /etc/os-release
              case $ID in
                ubuntu)
                  echo "Installing openssl-dev on Ubuntu..."
                  apt update -y
                  apt install -y pkg-config libssl-dev libc6 build-essential musl-tools unzip
                  ;;
                arch)
                  echo "Installing openssl-dev on Arch Linux..."
                  pacman -Syu --noconfirm pkg-config openssl musl unzip
                  ;;
                fedora)
                  echo "Installing openssl-dev on Fedora..."
                  dnf update -y
                  dnf install -y pkg-config openssl-devel musl unzip
                  ;;
                alpine)
                  echo "Installing openssl-dev on Alpine Linux..."
                  apk update -y
                  apk add pkgconfig openssl-dev musl-dev unzip
                  ;;
                centos)
                    echo "Installing openssl-dev on CentOS..."
                    yum update -y
                    yum install -y pkgconfig openssl-devel unzip
                    ;;  
                almalinux)
                    echo "Installing openssl-dev on almalinux..."
                    dnf update -y
                    dnf group install -y 'Development Tools'
                    dnf install -y pkg-config openssl-devel unzip
                    ;;
                *)
                    echo "Unsupported distribution: $ID"
                    exit 1
                    ;;
              esac    
            else
              echo "Could not determine distribution."
              exit 1
            fi
            
            PB_REL="https://github.com/protocolbuffers/protobuf/releases"
            ARCH=$(uname -m)
            if [ "$ARCH" = "aarch64" ]; then
              echo "Running on aarch64 architecture"
              rustup override set stable-msvc
              FILE="protoc-27.2-linux-aarch_64.zip"
            else
              FILE="protoc-27.2-linux-x86_64.zip"
              echo "Running on non-aarch64 architecture"
            fi

            curl -LO $PB_REL/download/v27.2/$FILE
            unzip -o $FILE -d /usr/local
            rm $FILE
            ln -s /usr/local/bin/protoc /usr/bin/protoc
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyartifacts
          path: ./python/dist
  python-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [ x64 ]
    steps:
      - name: "Check if user has write access"
        uses: "lannonbr/repo-permission-check-action@2.0.0"
        with:
          permission: "write"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}        
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.base }}
      - uses: actions/setup-python@v4
        with:
          python-version: |
            3.8
            3.9
            3.10
            3.11
            3.12
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./python
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist -i python3.8 -i python3.9 -i python3.10 -i python3.11 -i python3.12
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyartifacts
          path: ./python/dist
  python-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [ x86_64, aarch64 ]
    steps:
      - name: "Check if user has write access"
        uses: "lannonbr/repo-permission-check-action@2.0.0"
        with:
          permission: "write"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}        
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.base }}
      - uses: actions/setup-python@v4
        with:
          python-version: |
            3.8
            3.9
            3.10
            3.11
            3.12
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./python
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist -i python3.8 -i python3.9 -i python3.10 -i python3.11 -i python3.12
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyartifacts
          path: ./python/dist
  publish-python:
    needs: [ python-linux, python-windows, python-macos ]
    name: Publish to PyPi
    runs-on: ubuntu-latest
    steps:
      - name: "Check if user has write access"
        uses: "lannonbr/repo-permission-check-action@2.0.0"
        with:
          permission: "write"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@v3
        with:
          name: pyartifacts
          path: pyartifacts
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: pyartifacts
      - name: Publish a Python distribution to PyPI
        if: ${{ !inputs.dry_run }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: pyartifacts/
          verbose: true
          skip_existing: true
          verify_metadata: false
      - name: "Deleting artifacts"
        uses: geekyeggo/delete-artifact@v2
        with:
          failOnError: false
          name: |
            pyartifacts
