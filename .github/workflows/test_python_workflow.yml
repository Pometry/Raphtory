name: Run Python test
permissions:
  contents: write
on:
  workflow_call:
    inputs:
      skip_tests:
        type: boolean
        default: false
        required: false
      test_python_lower:
        type: boolean
        default: false
        required: false
# DO NOT CHANGE NAME OF WORKFLOW, USED IN OTHER WORKFLOWS KEEP "Rust Tests"
jobs:
  select-strategy:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.set-matrix.outputs.python-versions }}
    steps:
      - id: set-matrix
        run: |
          echo "python-versions=[\"3.9\",\"3.13\"]" >> $GITHUB_OUTPUT
  python-test:
    if: ${{ !inputs.skip_tests }}
    name: Python Tests
    needs: select-strategy
    strategy:
      matrix:
        python: ${{ fromJson(needs.select-strategy.outputs.python-versions) }}
        os: [ macos-latest, ubuntu-latest, windows-latest ]
    runs-on: '${{ matrix.os }}'
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          ref: ${{ github.head_ref }}
      - uses: maxim-lobanov/setup-xcode@v1
        name: Xcode version
        if: "contains(matrix.os, 'macOS')"
        with:
          xcode-version: latest-stable
      - uses: ./.github/actions/setup_rust
        name: Setup Rust
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: Swatinem/rust-cache@v2
        name: Cargo cache
        with:
          cache-all-crates: true
      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
      - name: Install Python dependencies
        run: |
          python -m pip install pytest tox
          python -m pip install -e examples/netflow
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Run Python tests
        run: |
          cd python && tox run
      - name: Run Python extension tests
        run: |
          cd examples/netflow/test && pytest .
      - name: Validate graphQL schema
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.13'
        run: |
          npx graphql-schema-linter --rules fields-have-descriptions,types-have-descriptions raphtory-graphql/schema.graphql || true
      - name: Update docs from graphQL schema
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.13'
        run: |
          python docs/scripts/gen_docs_graphql_pages.py
      - name: Check for uncommitted changes
      
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.13'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected. Committing and pushing..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git checkout ${{ github.head_ref }}
            git add .
            git commit -m "chore: apply tidy-public auto-fixes"
            git push --force-with-lease origin HEAD:${{ github.head_ref }} 
          else
            echo "No changes to commit."
          fi
