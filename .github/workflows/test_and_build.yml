name: test and build
on:
  push:
  schedule:
    - cron: '0 1 * * *'
jobs:
  configure:
    name: Configure
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.configure.outputs.date }}
      type: ${{ steps.configure.outputs.type }}
      branch: ${{ steps.configure.outputs.branch }}
    steps:
    - name: Configure
      id: configure
      run: |
        if [ "${{ github.event.schedule }}" = "0 1 * * *" ]; then
          echo "::set-output name=date::$(date +'%Y-%m-%d')"
          echo '::set-output name=branch::development'
          echo '::set-output name=type::nightly'
        elif [ "${GITHUB_REF##*/}" = "master" ]; then
          echo '::set-output name=branch::master'
          echo '::set-output name=type::master'
        else
          echo '::set-output name=branch::${GITHUB_REF##*/}'
          echo '::set-output name=type::regular'
        fi
  test:
    name: "test"
    needs: configure
    strategy:
      fail-fast: false
      matrix:
        runners: [ubuntu-latest]
        containers: ["eclipse-temurin:11.0.12_7-jdk"]
        python-version: ["3.9"]
        sbt: [1.6.2]
    runs-on: ${{ matrix.runners }}
    container:
      image: ${{ matrix.containers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Zookeeper
        run: |
          export ZK_VERSION=3.8.0 && \
          cd /usr/local/bin && \
          curl -L "https://dlcdn.apache.org/zookeeper/zookeeper-${ZK_VERSION}/apache-zookeeper-${ZK_VERSION}-bin.tar.gz" -o apache-zookeeper-${ZK_VERSION}-bin.tar.gz && \
          tar xf apache-zookeeper-${ZK_VERSION}-bin.tar.gz && \
          rm -rf apache-zookeeper-${ZK_VERSION}-bin.tar.gz
      - name: Create Zookeeper Config
        run: mv /usr/local/bin/$(ls /usr/local/bin|grep apache-zookeeper|grep -v "tar.gz"|sort|tail -1)/conf/zoo_sample.cfg /usr/local/bin/$(ls /usr/local/bin|grep apache-zookeeper|grep -v "tar.gz"|sort|tail -1)/conf/zoo.cfg
      - name: Start Zookeeper
        run: /usr/local/bin/$(ls /usr/local/bin|grep apache-zookeeper|grep -v "tar.gz"|sort|tail -1)/bin/zkServer.sh start &
      - name: Get sbt package
        run: apt-get update && apt-get install unzip && curl -L "https://github.com/sbt/sbt/releases/download/v${{ matrix.sbt }}/sbt-${{ matrix.sbt }}.zip" -o sbt-${{ matrix.sbt }}.zip && unzip sbt-${{ matrix.sbt }}.zip
      - name: Run SBT tests
        run: |
          export PATH=$(pwd)/sbt/bin:$PATH
          export RAPHTORY_CORE_LOG="ERROR"
          apt-get update && apt-get install make
          sbt "arrowCore/test"
          sbt "core/test"
          make sbt-build
        timeout-minutes: 10
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry and nbmake
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry nbmake
      - name: Install pyraphtory
        run: cd python/pyraphtory && poetry install
      - name: Run pyraphtory tests
        run: cd python/pyraphtory && poetry run pytest
      - name: Run notebook tests
        run: cd examples && pytest --nbmake
      - name: Run doc compile check
        run: export PATH=$(pwd)/sbt/bin:$PATH && cd docs && python -m pip install -r requirements.txt && apt-get update && apt-get -y install python3-sphinx && make html
    if: needs.configure.outputs.type == 'regular'

  build:
    name: "build"
    needs:
      - configure
    runs-on: ubuntu-latest
    container:
      image: eclipse-temurin:11.0.12_7-jdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          ref: "${{ needs.configure.outputs.branch }}"
      - name: Get sbt package
        run: apt-get update && apt-get install unzip && curl -L "https://github.com/sbt/sbt/releases/download/v1.5.5/sbt-1.5.5.zip" -o sbt-1.5.5.zip && unzip sbt-1.5.5.zip
      - name: Run sbt assembly
        run: |
          export PATH=$(pwd)/sbt/bin:$PATH
          sbt core/assembly
      # Tag when push to master branch
      - name: Bump tag version and push
        uses: anothrNick/github-tag-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: needs.configure.outputs.type == 'master'
      - name: Get latest tag
        id: bumped-tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        with:
          semver_only: true
        if: needs.configure.outputs.type == 'master'
      # Tag when scheduled nightly run
      - name: Push nightly build tag
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${{ needs.configure.outputs.branch }}-nightly-build-${{ needs.configure.outputs.date }}" -m "${{ needs.configure.outputs.branch }} nightly build - ${{ needs.configure.outputs.date }}"
          git push origin "${{ env.software_version }}"
        if: needs.configure.outputs.type == 'nightly'
      # Get artifacts
      - name: Get artifact path
        id: artifact
        run: echo "::set-output name=path::$(find . -name raphtory*.jar)"
      # Create release and upload artifacts to release if nightly
      - name: Name artifact for nightly release
        id: artifact-nightly
        run: mv ${{ steps.artifact.outputs.path }} ./raphtory-${{ needs.configure.outputs.branch }}-nightly-build-latest.jar
        if: needs.configure.outputs.type == 'nightly'
      - name: Create nightly release and upload artifact
        uses: ncipollo/release-action@v1
        with:
          name: "${{ needs.configure.outputs.branch }}-nightly-build-latest"
          tag: "${{ needs.configure.outputs.branch }}-nightly-build-${{ needs.configure.outputs.date }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: ./raphtory-${{ needs.configure.outputs.branch }}-nightly-build-latest.jar
          body: "Nightly build of ${{ needs.configure.outputs.branch }} branch."
          prerelease: false
        if: needs.configure.outputs.type == 'nightly'
      # Create release and upload artifacts to release if master
      - name: Name artifact for master release
        run: mv ${{ steps.artifact.outputs.path }} ./raphtory-${{ steps.bumped-tag.outputs.tag }}.jar
        if: needs.configure.outputs.type == 'master'
      - name: Create master release and upload artifact
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.bumped-tag.outputs.tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: false
          artifacts: ./raphtory-${{ steps.bumped-tag.outputs.tag }}.jar
          body: ${{ steps.bumped-tag.outputs.message }}
          prerelease: true
        if: needs.configure.outputs.type == 'master'
    if: (needs.configure.outputs.type == 'nightly' || needs.configure.outputs.type == 'master' )
