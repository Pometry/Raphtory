name: Run Rust test
on:
  workflow_call:
    inputs:
      skip_tests:
        type: boolean
        default: false
        required: false
# DO NOT CHANGE NAME OF WORKFLOW, USED IN OTHER WORKFLOWS KEEP "Rust Tests"
jobs:
  rust-test:
    if: ${{ !inputs.skip_tests }}
    name: Rust Tests
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-latest
          - os: windows-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout
      - name: Cache sccache
        uses: actions/cache@v3
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        name: Setup Rust
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install sccache (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/v0.5.4/sccache-v0.5.4-x86_64-apple-darwin.tar.gz | tar xz
          sudo mv sccache-v0.5.4-x86_64-apple-darwin/sccache /usr/local/bin/

      - name: Install sccache (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/v0.5.4/sccache-dist-v0.5.4-x86_64-unknown-linux-musl.tar.gz | tar xz
          sudo mv sccache-dist-v0.5.4-x86_64-unknown-linux-musl/sccache-dist /usr/local/bin/sccache

      - name: Install sccache (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri https://github.com/mozilla/sccache/releases/download/v0.5.4/sccache-v0.5.4-x86_64-pc-windows-msvc.tar.gz -OutFile sccache.tar.gz
          tar -xzvf .\sccache.tar.gz
          Move-Item .\sccache-v0.5.4-x86_64-pc-windows-msvc\sccache.exe C:\ProgramData\sccache.exe

      - name: Set up sccache
        run: |
          echo "SCCACHE_DIR=~/.cache/sccache" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Set up sccache
        run: |
          echo "SCCACHE_DIR=~/.cache/sccache" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
      - name: Run Tests
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -Awarnings
        with:
          command: test
          args: --all --no-default-features --features "raphtory/io raphtory/python"
  doc-test:
    if: ${{ !inputs.skip_tests }}
    name: "Doc tests"
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        name: Setup Rust
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build Rust Docs
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -Awarnings
        with:
          command: doc
          args: --no-deps -p raphtory -q
      - name: Build sphinx (readthedocs) docs
        run: |
          export PATH=$(pwd)/sbt/bin:$PATH
          sudo apt update && sudo apt install -y pandoc make python3-sphinx
          pip install -e python
          cd docs && python -m pip install -q -r requirements.txt && make html
