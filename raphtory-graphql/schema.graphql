enum AllPropertySpec {
	ALL
	ALL_METADATA
	ALL_PROPERTIES
}


"""
Collection of items
"""
type CollectionOfMetaGraph {
	list: [MetaGraph!]!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [MetaGraph!]!
	count: Int!
}

"""
Collection of items
"""
type CollectionOfNamespace {
	list: [Namespace!]!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Namespace!]!
	count: Int!
}

"""
Collection of items
"""
type CollectionOfNamespacedItem {
	list: [NamespacedItem!]!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [NamespacedItem!]!
	count: Int!
}

"""
Entity associated with document
"""
union DocumentEntity = Node | Edge

"""
Raphtory graph edge
"""
type Edge {
	"""
	Return a view of Edge containing only the default edge layer.
	"""
	defaultLayer: Edge!
	"""
	Returns a view of Edge containing all layers in the list of `names`.
	
	Errors if any of the layers do not exist.
	"""
	layers(names: [String!]!): Edge!
	"""
	Returns a view of Edge containing all layers except the excluded list of `names`.
	
	Errors if any of the layers do not exist.
	"""
	excludeLayers(names: [String!]!): Edge!
	"""
	Returns a view of Edge containing the specified layer.
	
	Errors if any of the layers do not exist.
	"""
	layer(name: String!): Edge!
	"""
	Returns a view of Edge containing all layers except the excluded layer specified.
	
	Errors if any of the layers do not exist.
	"""
	excludeLayer(name: String!): Edge!
	"""
	Creates a WindowSet with the given window duration and optional step using a rolling window.
	
	A rolling window is a window that moves forward by step size at each iteration.
	"""
	rolling(window: WindowDuration!, step: WindowDuration): EdgeWindowSet!
	"""
	Creates a WindowSet with the given step size using an expanding window.
	
	An expanding window is a window that grows by step size at each iteration.
	"""
	expanding(step: WindowDuration!): EdgeWindowSet!
	"""
	Creates a view of the Edge including all events between the specified `start` (inclusive) and `end` (exclusive).
	"""
	window(start: Int!, end: Int!): Edge!
	"""
	Creates a view of the Edge including all events at a specified `time`.
	"""
	at(time: Int!): Edge!
	latest: Edge!
	"""
	Creates a view of the Edge including all events that have not been explicitly deleted at time.
	
	This is equivalent to before(time + 1) for Graph and at(time) for PersistentGraph.
	"""
	snapshotAt(time: Int!): Edge!
	"""
	Creates a view of the Edge including all events that have not been explicitly deleted at the latest time.
	
	This is equivalent to a no-op for Graph and latest() for PersistentGraph.
	"""
	snapshotLatest: Edge!
	"""
	Creates a view of the Edge including all events before a specified `end` (exclusive).
	"""
	before(time: Int!): Edge!
	"""
	Creates a view of the Edge including all events after a specified `start` (exclusive).
	"""
	after(time: Int!): Edge!
	"""
	Shrinks both the `start` and `end` of the window.
	"""
	shrinkWindow(start: Int!, end: Int!): Edge!
	"""
	Set the `start` of the window.
	"""
	shrinkStart(start: Int!): Edge!
	"""
	Set the `end` of the window.
	"""
	shrinkEnd(end: Int!): Edge!
	"""
	Takes a specified selection of views and applies them in order given
	"""
	applyViews(views: [EdgeViewCollection!]!): Edge!
	"""
	Returns the earliest time of an edge.
	"""
	earliestTime: Int
	firstUpdate: Int
	"""
	Returns the latest time of an edge.
	"""
	latestTime: Int
	lastUpdate: Int
	"""
	Returns the time of an exploded edge.
	"""
	time: Int!
	"""
	Returns the start time for rolling and expanding windows for this edge.
	"""
	start: Int
	"""
	Returns the latest time that this edge is valid.
	"""
	end: Int
	"""
	Returns the source node of the edge.
	"""
	src: Node!
	"""
	Returns the destination node of the edge.
	"""
	dst: Node!
	"""
	Returns the node at the other end of the edge (same as dst() for out-edges and src() for in-edges).
	"""
	nbr: Node!
	"""
	Returns the id of the edge.
	"""
	id: [String!]!
	"""
	Returns a view of the properties of the edge.
	"""
	properties: Properties!
	"""
	Returns the metadata of an edge.
	"""
	metadata: Metadata!
	"""
	Returns the names of the layers that have this edge as a member.
	"""
	layerNames: [String!]!
	"""
	Returns the names of the layer this edge belongs to, assuming it belongs to only one layer.
	"""
	layerName: String!
	"""
	Returns an edge object for each update within the original edge.
	"""
	explode: Edges!
	"""
	Returns an edge object for each layer within the original edge.
	
	Each new edge object contains only updates from the respective layers.
	"""
	explodeLayers: Edges!
	"""
	Returns a list of timestamps of when an edge is added or change to an edge is made.
	"""
	history: [Int!]!
	"""
	Returns a list of timestamps of when an edge is deleted.
	"""
	deletions: [Int!]!
	"""
	Checks if the edge is currently valid and exists at the current time.
	
	Returns: boolean
	"""
	isValid: Boolean!
	"""
	Checks if the edge is currently active and has at least one update within the current period.
	
	Returns: boolean
	"""
	isActive: Boolean!
	"""
	Checks if the edge is deleted at the current time.
	
	Returns: boolean
	"""
	isDeleted: Boolean!
	"""
	Checks if the edge is on the same node.
	
	Returns: boolean
	"""
	isSelfLoop: Boolean!
}

input EdgeAddition {
	src: String!
	dst: String!
	layer: String
	metadata: [PropertyInput!]
	updates: [TemporalPropertyInput!]
}

input EdgeFilter @oneOf {
	src: NodeFieldFilter
	dst: NodeFieldFilter
	property: PropertyFilterExpr
	metadata: MetadataFilterExpr
	temporalProperty: TemporalPropertyFilterExpr
	and: [EdgeFilter!]
	or: [EdgeFilter!]
	not: EdgeFilter
}

type EdgeSchema {
	"""
	Returns the type of source for these edges
	"""
	srcType: String!
	"""
	Returns the type of destination for these edges
	"""
	dstType: String!
	"""
	Returns the list of property schemas for edges connecting these types of nodes
	"""
	properties: [PropertySchema!]!
	"""
	Returns the list of metadata schemas for edges connecting these types of nodes
	"""
	metadata: [PropertySchema!]!
}

input EdgeSortBy {
	reverse: Boolean
	src: Boolean
	dst: Boolean
	time: SortByTime
	property: String
}

input EdgeViewCollection @oneOf {
	defaultLayer: Boolean
	latest: Boolean
	snapshotLatest: Boolean
	snapshotAt: Int
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	window: Window
	at: Int
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
}

type EdgeWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Edge!]!
	list: [Edge!]!
}

type Edges {
	defaultLayer: Edges!
	layers(names: [String!]!): Edges!
	excludeLayers(names: [String!]!): Edges!
	layer(name: String!): Edges!
	excludeLayer(name: String!): Edges!
	rolling(window: WindowDuration!, step: WindowDuration): EdgesWindowSet!
	expanding(step: WindowDuration!): EdgesWindowSet!
	window(start: Int!, end: Int!): Edges!
	at(time: Int!): Edges!
	latest: Edges!
	snapshotAt(time: Int!): Edges!
	snapshotLatest: Edges!
	before(time: Int!): Edges!
	after(time: Int!): Edges!
	shrinkWindow(start: Int!, end: Int!): Edges!
	shrinkStart(start: Int!): Edges!
	shrinkEnd(end: Int!): Edges!
	applyViews(views: [EdgesViewCollection!]!): Edges!
	explode: Edges!
	explodeLayers: Edges!
	sorted(sortBys: [EdgeSortBy!]!): Edges!
	start: Int
	end: Int
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Edge!]!
	list: [Edge!]!
}

input EdgesViewCollection @oneOf {
	defaultLayer: Boolean
	latest: Boolean
	snapshotLatest: Boolean
	snapshotAt: Int
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	window: Window
	at: Int
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
}

type EdgesWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Edges!]!
	list: [Edges!]!
}


"""
Document in a vector graph
"""
type GqlDocument {
	entity: DocumentEntity!
	content: String!
	embedding: [Float!]!
	score: Float!
}

type GqlIndexSpec {
	nodeMetadata: [String!]!
	nodeProperties: [String!]!
	edgeMetadata: [String!]!
	edgeProperties: [String!]!
}

type GqlVectorSelection {
	nodes: [Node!]!
	edges: [Edge!]!
	getDocuments: [GqlDocument!]!
	addNodes(nodes: [String!]!): GqlVectorSelection!
	addEdges(edges: [InputEdge!]!): GqlVectorSelection!
	expand(hops: Int!, window: Window): GqlVectorSelection!
	expandEntitiesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
	expandNodesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
	expandEdgesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
}

type Graph {
	uniqueLayers: [String!]!
	defaultLayer: Graph!
	layers(names: [String!]!): Graph!
	excludeLayers(names: [String!]!): Graph!
	layer(name: String!): Graph!
	excludeLayer(name: String!): Graph!
	subgraph(nodes: [String!]!): Graph!
	valid: Graph!
	subgraphNodeTypes(nodeTypes: [String!]!): Graph!
	excludeNodes(nodes: [String!]!): Graph!
	rolling(window: WindowDuration!, step: WindowDuration): GraphWindowSet!
	expanding(step: WindowDuration!): GraphWindowSet!
	"""
	Return a graph containing only the activity between `start` and `end` measured as milliseconds from epoch
	"""
	window(start: Int!, end: Int!): Graph!
	at(time: Int!): Graph!
	latest: Graph!
	snapshotAt(time: Int!): Graph!
	snapshotLatest: Graph!
	before(time: Int!): Graph!
	after(time: Int!): Graph!
	shrinkWindow(start: Int!, end: Int!): Graph!
	shrinkStart(start: Int!): Graph!
	shrinkEnd(end: Int!): Graph!
	created: Int!
	lastOpened: Int!
	lastUpdated: Int!
	earliestTime: Int
	latestTime: Int
	start: Int
	end: Int
	earliestEdgeTime(includeNegative: Boolean): Int
	latestEdgeTime(includeNegative: Boolean): Int
	countEdges: Int!
	countTemporalEdges: Int!
	countNodes: Int!
	hasNode(name: String!): Boolean!
	hasEdge(src: String!, dst: String!, layer: String): Boolean!
	node(name: String!): Node
	"""
	query (optionally a subset of) the nodes in the graph
	"""
	nodes(ids: [String!]): Nodes!
	edge(src: String!, dst: String!): Edge
	edges: Edges!
	properties: Properties!
	metadata: Metadata!
	name: String!
	path: String!
	namespace: String!
	schema: GraphSchema!
	algorithms: GraphAlgorithmPlugin!
	sharedNeighbours(selectedNodes: [String!]!): [Node!]!
	"""
	Export all nodes and edges from this graph view to another existing graph
	"""
	exportTo(path: String!): Boolean!
	nodeFilter(filter: NodeFilter!): Graph!
	edgeFilter(filter: EdgeFilter!): Graph!
	getIndexSpec: GqlIndexSpec!
	searchNodes(filter: NodeFilter!, limit: Int!, offset: Int!): [Node!]!
	searchEdges(filter: EdgeFilter!, limit: Int!, offset: Int!): [Edge!]!
	applyViews(views: [GraphViewCollection!]!): Graph!
}

type GraphAlgorithmPlugin {
	pagerank(iterCount: Int!, threads: Int, tol: Float): [PagerankOutput!]!
	shortest_path(source: String!, targets: [String!]!, direction: String): [ShortestPathOutput!]!
}

type GraphSchema {
	nodes: [NodeSchema!]!
	layers: [LayerSchema!]!
}

enum GraphType {
	PERSISTENT
	EVENT
}

input GraphViewCollection @oneOf {
	defaultLayer: Boolean
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	subgraph: [String!]
	subgraphNodeTypes: [String!]
	excludeNodes: [String!]
	valid: Boolean
	window: Window
	at: Int
	latest: Boolean
	snapshotAt: Int
	snapshotLatest: Boolean
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
	nodeFilter: NodeFilter
	edgeFilter: EdgeFilter
}

type GraphWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Graph!]!
	list: [Graph!]!
}


input IndexSpecInput {
	nodeProps: PropsInput!
	edgeProps: PropsInput!
}

input InputEdge {
	src: String!
	dst: String!
}


type LayerSchema {
	"""
	Returns the name of the layer with this schema
	"""
	name: String!
	"""
	Returns the list of edge schemas for this edge layer
	"""
	edges: [EdgeSchema!]!
}

type MetaGraph {
	name: String
	path: String!
	created: Int!
	lastOpened: Int!
	lastUpdated: Int!
	nodeCount: Int!
	edgeCount: Int!
	metadata: [Property!]!
}

type Metadata {
	get(key: String!): Property
	contains(key: String!): Boolean!
	keys: [String!]!
	values(keys: [String!]): [Property!]!
}

input MetadataFilterExpr {
	name: String!
	operator: Operator!
	value: Value
}

type MutRoot {
	plugins: MutationPlugin!
	"""
	Delete graph from a path on the server
	"""
	deleteGraph(path: String!): Boolean!
	"""
	Creates a new graph
	"""
	newGraph(path: String!, graphType: GraphType!): Boolean!
	"""
	Move graph from a path path on the server to a new_path on the server.
	
	If namespace is not provided, it will be set to the current working directory.
	This applies to both the graph namespace and new graph namespace.
	"""
	moveGraph(path: String!, newPath: String!): Boolean!
	"""
	Copy graph from a path path on the server to a new_path on the server.
	
	If namespace is not provided, it will be set to the current working directory.
	This applies to both the graph namespace and new graph namespace.
	"""
	copyGraph(path: String!, newPath: String!): Boolean!
	"""
	Upload graph file from a path on the client
	
	Returns::
	name of the new graph
	"""
	uploadGraph(path: String!, graph: Upload!, overwrite: Boolean!): String!
	"""
	Send graph bincode as base64 encoded string
	
	Returns::
	path of the new graph
	"""
	sendGraph(path: String!, graph: String!, overwrite: Boolean!): String!
	"""
	Returns a subgraph given a set of nodes from an existing graph in the server
	
	Returns::
	name of the new graph
	"""
	createSubgraph(parentPath: String!, nodes: [String!]!, newPath: String!, overwrite: Boolean!): String!
	"""
	Creates search index
	"""
	createIndex(path: String!, indexSpec: IndexSpecInput, inRam: Boolean!): Boolean!
}

type MutableEdge {
	"""
	Use to check if adding the edge was successful
	"""
	success: Boolean!
	"""
	Get the non-mutable edge for querying
	"""
	edge: Edge!
	"""
	Get the mutable source node of the edge
	"""
	src: MutableNode!
	"""
	Get the mutable destination node of the edge
	"""
	dst: MutableNode!
	"""
	Mark the edge as deleted at time `time`
	"""
	delete(time: Int!, layer: String): Boolean!
	"""
	Add metadata to the edge (errors if the value already exists)
	
	If this is called after `add_edge`, the layer is inherited from the `add_edge` and does not
	need to be specified again.
	"""
	addMetadata(properties: [PropertyInput!]!, layer: String): Boolean!
	"""
	Update metadata of the edge (existing values are overwritten)
	
	If this is called after `add_edge`, the layer is inherited from the `add_edge` and does not
	need to be specified again.
	"""
	updateMetadata(properties: [PropertyInput!]!, layer: String): Boolean!
	"""
	Add temporal property updates to the edge
	
	If this is called after `add_edge`, the layer is inherited from the `add_edge` and does not
	need to be specified again.
	"""
	addUpdates(time: Int!, properties: [PropertyInput!], layer: String): Boolean!
}

type MutableGraph {
	"""
	Get the non-mutable graph
	"""
	graph: Graph!
	"""
	Get mutable existing node
	"""
	node(name: String!): MutableNode
	"""
	Add a new node or add updates to an existing node
	"""
	addNode(time: Int!, name: String!, properties: [PropertyInput!], nodeType: String): MutableNode!
	"""
	Create a new node or fail if it already exists
	"""
	createNode(time: Int!, name: String!, properties: [PropertyInput!], nodeType: String): MutableNode!
	"""
	Add a batch of nodes
	"""
	addNodes(nodes: [NodeAddition!]!): Boolean!
	"""
	Get a mutable existing edge
	"""
	edge(src: String!, dst: String!): MutableEdge
	"""
	Add a new edge or add updates to an existing edge
	"""
	addEdge(time: Int!, src: String!, dst: String!, properties: [PropertyInput!], layer: String): MutableEdge!
	"""
	Add a batch of edges
	"""
	addEdges(edges: [EdgeAddition!]!): Boolean!
	"""
	Mark an edge as deleted (creates the edge if it did not exist)
	"""
	deleteEdge(time: Int!, src: String!, dst: String!, layer: String): MutableEdge!
	"""
	Add temporal properties to graph
	"""
	addProperties(t: Int!, properties: [PropertyInput!]!): Boolean!
	"""
	Add metadata to graph (errors if the property already exists)
	"""
	addMetadata(properties: [PropertyInput!]!): Boolean!
	"""
	Update metadata of the graph (overwrites existing values)
	"""
	updateMetadata(properties: [PropertyInput!]!): Boolean!
}

type MutableNode {
	"""
	Use to check if adding the node was successful
	"""
	success: Boolean!
	"""
	Get the non-mutable `Node`
	"""
	node: Node!
	"""
	Add metadata to the node (errors if the property already exists)
	"""
	addMetadata(properties: [PropertyInput!]!): Boolean!
	"""
	Set the node type (errors if the node already has a non-default type)
	"""
	setNodeType(newType: String!): Boolean!
	"""
	Update metadata of the node (overwrites existing property values)
	"""
	updateMetadata(properties: [PropertyInput!]!): Boolean!
	"""
	Add temporal property updates to the node
	"""
	addUpdates(time: Int!, properties: [PropertyInput!]): Boolean!
}

type MutationPlugin {
	NoOps: String!
}

type Namespace {
	graphs: CollectionOfMetaGraph!
	path: String!
	parent: Namespace
	children: CollectionOfNamespace!
	items: CollectionOfNamespacedItem!
}

union NamespacedItem = Namespace | MetaGraph

type Node {
	id: String!
	name: String!
	defaultLayer: Node!
	layers(names: [String!]!): Node!
	excludeLayers(names: [String!]!): Node!
	layer(name: String!): Node!
	excludeLayer(name: String!): Node!
	rolling(window: WindowDuration!, step: WindowDuration): NodeWindowSet!
	expanding(step: WindowDuration!): NodeWindowSet!
	window(start: Int!, end: Int!): Node!
	at(time: Int!): Node!
	latest: Node!
	snapshotAt(time: Int!): Node!
	snapshotLatest: Node!
	before(time: Int!): Node!
	after(time: Int!): Node!
	shrinkWindow(start: Int!, end: Int!): Node!
	shrinkStart(start: Int!): Node!
	shrinkEnd(end: Int!): Node!
	applyViews(views: [NodeViewCollection!]!): Node!
	earliestTime: Int
	firstUpdate: Int
	latestTime: Int
	lastUpdate: Int
	start: Int
	end: Int
	history: [Int!]!
	edgeHistoryCount: Int!
	isActive: Boolean!
	nodeType: String
	properties: Properties!
	metadata: Metadata!
	"""
	Returns the number of edges connected to this node
	"""
	degree: Int!
	"""
	Returns the number edges with this node as the source
	"""
	outDegree: Int!
	"""
	Returns the number edges with this node as the destination
	"""
	inDegree: Int!
	inComponent: Nodes!
	outComponent: Nodes!
	edges: Edges!
	outEdges: Edges!
	inEdges: Edges!
	neighbours: PathFromNode!
	inNeighbours: PathFromNode!
	outNeighbours: PathFromNode!
	nodeFilter(filter: NodeFilter!): Node!
}

input NodeAddition {
	name: String!
	nodeType: String
	metadata: [PropertyInput!]
	updates: [TemporalPropertyInput!]
}

enum NodeField {
	NODE_NAME
	NODE_TYPE
}

input NodeFieldFilter {
	field: NodeField!
	operator: Operator!
	value: Value!
}

input NodeFilter @oneOf {
	node: NodeFieldFilter
	property: PropertyFilterExpr
	metadata: MetadataFilterExpr
	temporalProperty: TemporalPropertyFilterExpr
	and: [NodeFilter!]
	or: [NodeFilter!]
	not: NodeFilter
}

type NodeSchema {
	typeName: String!
	"""
	Returns the list of property schemas for this node
	"""
	properties: [PropertySchema!]!
	metadata: [PropertySchema!]!
}

input NodeSortBy {
	reverse: Boolean
	id: Boolean
	time: SortByTime
	property: String
}

input NodeViewCollection @oneOf {
	defaultLayer: Boolean
	latest: Boolean
	snapshotLatest: Boolean
	snapshotAt: Int
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	window: Window
	at: Int
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
	nodeFilter: NodeFilter
}

type NodeWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Node!]!
	list: [Node!]!
}

type Nodes {
	defaultLayer: Nodes!
	layers(names: [String!]!): Nodes!
	excludeLayers(names: [String!]!): Nodes!
	layer(name: String!): Nodes!
	excludeLayer(name: String!): Nodes!
	rolling(window: WindowDuration!, step: WindowDuration): NodesWindowSet!
	expanding(step: WindowDuration!): NodesWindowSet!
	window(start: Int!, end: Int!): Nodes!
	at(time: Int!): Nodes!
	latest: Nodes!
	snapshotAt(time: Int!): Nodes!
	snapshotLatest: Nodes!
	before(time: Int!): Nodes!
	after(time: Int!): Nodes!
	shrinkWindow(start: Int!, end: Int!): Nodes!
	shrinkStart(start: Int!): Nodes!
	shrinkEnd(end: Int!): Nodes!
	typeFilter(nodeTypes: [String!]!): Nodes!
	nodeFilter(filter: NodeFilter!): Nodes!
	applyViews(views: [NodesViewCollection!]!): Nodes!
	sorted(sortBys: [NodeSortBy!]!): Nodes!
	start: Int
	end: Int
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Node!]!
	list: [Node!]!
	ids: [String!]!
}

input NodesViewCollection @oneOf {
	defaultLayer: Boolean
	latest: Boolean
	snapshotLatest: Boolean
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	window: Window
	at: Int
	snapshotAt: Int
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
	nodeFilter: NodeFilter
	typeFilter: [String!]
}

type NodesWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Nodes!]!
	list: [Nodes!]!
}

input ObjectEntry {
	key: String!
	value: Value!
}

enum Operator {
	EQUAL
	NOT_EQUAL
	GREATER_THAN_OR_EQUAL
	LESS_THAN_OR_EQUAL
	GREATER_THAN
	LESS_THAN
	IS_NONE
	IS_SOME
	IS_IN
	IS_NOT_IN
	CONTAINS
	NOT_CONTAINS
}

type PagerankOutput {
	name: String!
	rank: Float!
}

type PathFromNode {
	layers(names: [String!]!): PathFromNode!
	excludeLayers(names: [String!]!): PathFromNode!
	layer(name: String!): PathFromNode!
	excludeLayer(name: String!): PathFromNode!
	rolling(window: WindowDuration!, step: WindowDuration): PathFromNodeWindowSet!
	expanding(step: WindowDuration!): PathFromNodeWindowSet!
	window(start: Int!, end: Int!): PathFromNode!
	at(time: Int!): PathFromNode!
	snapshotLatest: PathFromNode!
	snapshotAt(time: Int!): PathFromNode!
	latest: PathFromNode!
	before(time: Int!): PathFromNode!
	after(time: Int!): PathFromNode!
	shrinkWindow(start: Int!, end: Int!): PathFromNode!
	shrinkStart(start: Int!): PathFromNode!
	shrinkEnd(end: Int!): PathFromNode!
	typeFilter(nodeTypes: [String!]!): PathFromNode!
	start: Int
	end: Int
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Node!]!
	list: [Node!]!
	ids: [String!]!
	applyViews(views: [PathFromNodeViewCollection!]!): PathFromNode!
}

input PathFromNodeViewCollection @oneOf {
	latest: Boolean
	snapshotLatest: Boolean
	snapshotAt: Int
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	window: Window
	at: Int
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
}

type PathFromNodeWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	`limit` - The size of the page (number of items to fetch).
	`offset` - The number of items to skip (defaults to 0).
	`page_index` - The number of pages (of size `limit`) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [PathFromNode!]!
	list: [PathFromNode!]!
}

type Properties {
	get(key: String!): Property
	contains(key: String!): Boolean!
	keys: [String!]!
	values(keys: [String!]): [Property!]!
	temporal: TemporalProperties!
}

type Property {
	key: String!
	asString: String!
	value: PropertyOutput!
}

input PropertyFilterExpr {
	name: String!
	operator: Operator!
	value: Value
}

input PropertyInput {
	key: String!
	value: Value!
}

scalar PropertyOutput

type PropertySchema {
	key: String!
	propertyType: String!
	variants: [String!]!
}

type PropertyTuple {
	time: Int!
	asString: String!
	value: PropertyOutput!
}

input PropsInput @oneOf {
	all: AllPropertySpec
	some: SomePropertySpec
}

type QueryPlugin {
	NoOps: String!
}

type QueryRoot {
	"""
	Hello world demo
	"""
	hello: String!
	"""
	Returns a graph
	"""
	graph(path: String!): Graph!
	"""
	Update graph query, has side effects to update graph state
	
	Returns:: GqlMutableGraph
	"""
	updateGraph(path: String!): MutableGraph!
	"""
	Create vectorised graph in the format used for queries
	
	Returns:: GqlVectorisedGraph
	"""
	vectorisedGraph(path: String!): VectorisedGraph
	"""
	Returns root namespaces
	
	Returns::  List of namespaces on root
	"""
	namespaces: CollectionOfNamespace!
	"""
	Returns a specific namespace at a given path
	
	Returns:: Namespace or error if no namespace found
	"""
	namespace(path: String!): Namespace!
	"""
	Returns root namespace
	
	Returns::  Root namespace
	"""
	root: Namespace!
	"""
	Placeholder
	"""
	plugins: QueryPlugin!
	"""
	Encodes graph and returns as string
	
	Returns:: Base64 url safe encoded string
	"""
	receiveGraph(path: String!): String!
}

type ShortestPathOutput {
	target: String!
	nodes: [String!]!
}

input SomePropertySpec {
	metadata: [String!]!
	properties: [String!]!
}

enum SortByTime {
	LATEST
	EARLIEST
}


type TemporalProperties {
	get(key: String!): TemporalProperty
	contains(key: String!): Boolean!
	keys: [String!]!
	values(keys: [String!]): [TemporalProperty!]!
}

type TemporalProperty {
	key: String!
	history: [Int!]!
	values: [String!]!
	at(t: Int!): String
	latest: String
	unique: [String!]!
	orderedDedupe(latestTime: Boolean!): [PropertyTuple!]!
}

input TemporalPropertyFilterExpr {
	name: String!
	temporal: TemporalType!
	operator: Operator!
	value: Value
}

input TemporalPropertyInput {
	time: Int!
	properties: [PropertyInput!]
}

enum TemporalType {
	ANY
	LATEST
}

scalar Upload

input Value @oneOf {
	u64: Int
	i64: Int
	f64: Float
	str: String
	bool: Boolean
	list: [Value!]
	object: [ObjectEntry!]
}

type VectorisedGraph {
	emptySelection: GqlVectorSelection!
	entitiesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
	nodesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
	edgesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
}

input Window {
	start: Int!
	end: Int!
}

input WindowDuration @oneOf {
	duration: String
	epoch: Int
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @oneOf on INPUT_OBJECT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: QueryRoot
	mutation: MutRoot
}
