enum AllPropertySpec {
	ALL
	ALL_METADATA
	ALL_PROPERTIES
}


"""
Collection of items
"""
type CollectionOfMetaGraph {
	"""
	Returns a list of collection objects.
	"""
	list: [MetaGraph!]!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit - The size of the page (number of items to fetch).
	offset - The number of items to skip (defaults to 0).
	page_index - The number of pages (of size limit) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [MetaGraph!]!
	"""
	Returns a count of collection objects.
	"""
	count: Int!
}

"""
Collection of items
"""
type CollectionOfNamespace {
	"""
	Returns a list of collection objects.
	"""
	list: [Namespace!]!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit - The size of the page (number of items to fetch).
	offset - The number of items to skip (defaults to 0).
	page_index - The number of pages (of size limit) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Namespace!]!
	"""
	Returns a count of collection objects.
	"""
	count: Int!
}

"""
Collection of items
"""
type CollectionOfNamespacedItem {
	"""
	Returns a list of collection objects.
	"""
	list: [NamespacedItem!]!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit - The size of the page (number of items to fetch).
	offset - The number of items to skip (defaults to 0).
	page_index - The number of pages (of size limit) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [NamespacedItem!]!
	"""
	Returns a count of collection objects.
	"""
	count: Int!
}

"""
Entity associated with document.
"""
union DocumentEntity = Node | Edge

"""
Raphtory graph edge
"""
type Edge {
	"""
	Return a view of Edge containing only the default edge layer.
	"""
	defaultLayer: Edge!
	"""
	Returns a view of Edge containing all layers in the list of  names .
	
	Errors if any of the layers do not exist.
	"""
	layers(names: [String!]!): Edge!
	"""
	Returns a view of Edge containing all layers except the excluded list of  names .
	
	Errors if any of the layers do not exist.
	"""
	excludeLayers(names: [String!]!): Edge!
	"""
	Returns a view of Edge containing the specified layer.
	
	Errors if any of the layers do not exist.
	"""
	layer(name: String!): Edge!
	"""
	Returns a view of Edge containing all layers except the excluded layer specified.
	
	Errors if any of the layers do not exist.
	"""
	excludeLayer(name: String!): Edge!
	"""
	Creates a WindowSet with the given window duration and optional step using a rolling window.
	
	A rolling window is a window that moves forward by step size at each iteration.
	"""
	rolling(window: WindowDuration!, step: WindowDuration): EdgeWindowSet!
	"""
	Creates a WindowSet with the given step size using an expanding window.
	
	An expanding window is a window that grows by step size at each iteration.
	"""
	expanding(step: WindowDuration!): EdgeWindowSet!
	"""
	Creates a view of the Edge including all events between the specified  start  (inclusive) and  end  (exclusive).
	"""
	window(start: Int!, end: Int!): Edge!
	"""
	Creates a view of the Edge including all events at a specified  time .
	"""
	at(time: Int!): Edge!
	"""
	Returns the latest time of an edge.
	"""
	latest: Edge!
	"""
	Creates a view of the Edge including all events that have not been explicitly deleted at time.
	
	This is equivalent to before(time + 1) for Graph and at(time) for PersistentGraph.
	"""
	snapshotAt(time: Int!): Edge!
	"""
	Creates a view of the Edge including all events that have not been explicitly deleted at the latest time.
	
	This is equivalent to a no-op for Graph and latest() for PersistentGraph.
	"""
	snapshotLatest: Edge!
	"""
	Creates a view of the Edge including all events before a specified  end  (exclusive).
	"""
	before(time: Int!): Edge!
	"""
	Creates a view of the Edge including all events after a specified  start  (exclusive).
	"""
	after(time: Int!): Edge!
	"""
	Shrinks both the  start  and  end  of the window.
	"""
	shrinkWindow(start: Int!, end: Int!): Edge!
	"""
	Set the  start  of the window.
	"""
	shrinkStart(start: Int!): Edge!
	"""
	Set the  end  of the window.
	"""
	shrinkEnd(end: Int!): Edge!
	"""
	Takes a specified selection of views and applies them in order given
	"""
	applyViews(views: [EdgeViewCollection!]!): Edge!
	"""
	Returns the earliest time of an edge.
	"""
	earliestTime: Int
	firstUpdate: Int
	"""
	Returns the latest time of an edge.
	"""
	latestTime: Int
	lastUpdate: Int
	"""
	Returns the time of an exploded edge.
	"""
	time: Int!
	"""
	Returns the start time for rolling and expanding windows for this edge.
	"""
	start: Int
	"""
	Returns the latest time that this edge is valid.
	"""
	end: Int
	"""
	Returns the source node of the edge.
	"""
	src: Node!
	"""
	Returns the destination node of the edge.
	"""
	dst: Node!
	"""
	Returns the node at the other end of the edge (same as dst() for out-edges and src() for in-edges).
	"""
	nbr: Node!
	"""
	Returns the id of the edge.
	"""
	id: [String!]!
	"""
	Returns a view of the properties of the edge.
	"""
	properties: Properties!
	"""
	Returns the metadata of an edge.
	"""
	metadata: Metadata!
	"""
	Returns the names of the layers that have this edge as a member.
	"""
	layerNames: [String!]!
	"""
	Returns the names of the layer this edge belongs to, assuming it belongs to only one layer.
	"""
	layerName: String!
	"""
	Returns an edge object for each update within the original edge.
	"""
	explode: Edges!
	"""
	Returns an edge object for each layer within the original edge.
	
	Each new edge object contains only updates from the respective layers.
	"""
	explodeLayers: Edges!
	"""
	Returns a list of timestamps of when an edge is added or change to an edge is made.
	"""
	history: [Int!]!
	"""
	Returns a list of timestamps of when an edge is deleted.
	"""
	deletions: [Int!]!
	"""
	Checks if the edge is currently valid and exists at the current time.
	
	Returns: boolean
	"""
	isValid: Boolean!
	"""
	Checks if the edge is currently active and has at least one update within the current period.
	
	Returns: boolean
	"""
	isActive: Boolean!
	"""
	Checks if the edge is deleted at the current time.
	
	Returns: boolean
	"""
	isDeleted: Boolean!
	"""
	Checks if the edge is on the same node.
	
	Returns: boolean
	"""
	isSelfLoop: Boolean!
}

input EdgeAddition {
	src: String!
	dst: String!
	layer: String
	metadata: [PropertyInput!]
	updates: [TemporalPropertyInput!]
}

input EdgeFilter @oneOf {
	src: NodeFieldFilter
	dst: NodeFieldFilter
	property: PropertyFilterExpr
	metadata: MetadataFilterExpr
	temporalProperty: TemporalPropertyFilterExpr
	and: [EdgeFilter!]
	or: [EdgeFilter!]
	not: EdgeFilter
}

type EdgeSchema {
	"""
	Returns the type of source for these edges
	"""
	srcType: String!
	"""
	Returns the type of destination for these edges
	"""
	dstType: String!
	"""
	Returns the list of property schemas for edges connecting these types of nodes
	"""
	properties: [PropertySchema!]!
	"""
	Returns the list of metadata schemas for edges connecting these types of nodes
	"""
	metadata: [PropertySchema!]!
}

input EdgeSortBy {
	reverse: Boolean
	src: Boolean
	dst: Boolean
	time: SortByTime
	property: String
}

input EdgeViewCollection @oneOf {
	defaultLayer: Boolean
	latest: Boolean
	snapshotLatest: Boolean
	snapshotAt: Int
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	window: Window
	at: Int
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
}

type EdgeWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit  - The size of the page (number of items to fetch).
	offset  - The number of items to skip (defaults to 0).
	page_index  - The number of pages (of size  limit ) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Edge!]!
	list: [Edge!]!
}

type Edges {
	"""
	Return a view of Edge containing only the default edge layer.
	"""
	defaultLayer: Edges!
	"""
	Returns a view of Edge containing all layers in the list of  names . Errors if any of the layers do not exist.
	"""
	layers(names: [String!]!): Edges!
	"""
	Returns a view of Edge containing all layers except the excluded list of  names . Errors if any of the layers do not exist.
	"""
	excludeLayers(names: [String!]!): Edges!
	"""
	Returns a view of Edge containing the specified layer. Errors if any of the layers do not exist.
	"""
	layer(name: String!): Edges!
	"""
	Returns a view of Edge containing all layers except the excluded layer specified. Errors if any of the layers do not exist.
	"""
	excludeLayer(name: String!): Edges!
	"""
	Creates a WindowSet with the given window duration and optional step using a rolling window. A rolling window is a window that moves forward by step size at each iteration.
	"""
	rolling(window: WindowDuration!, step: WindowDuration): EdgesWindowSet!
	"""
	Creates a WindowSet with the given step size using an expanding window. An expanding window is a window that grows by step size at each iteration.
	"""
	expanding(step: WindowDuration!): EdgesWindowSet!
	"""
	Creates a view of the Edge including all events between the specified  start  (inclusive) and  end  (exclusive).
	"""
	window(start: Int!, end: Int!): Edges!
	"""
	Creates a view of the Edge including all events at a specified  time .
	"""
	at(time: Int!): Edges!
	latest: Edges!
	"""
	Creates a view of the Edge including all events that have not been explicitly deleted at time. This is equivalent to before(time + 1) for Graph and at(time) for PersistentGraph.
	"""
	snapshotAt(time: Int!): Edges!
	"""
	Creates a view of the Edge including all events that have not been explicitly deleted at the latest time. This is equivalent to a no-op for Graph and latest() for PersistentGraph.
	"""
	snapshotLatest: Edges!
	"""
	Creates a view of the Edge including all events before a specified  end  (exclusive).
	"""
	before(time: Int!): Edges!
	"""
	Creates a view of the Edge including all events after a specified  start  (exclusive).
	"""
	after(time: Int!): Edges!
	"""
	Shrinks both the  start  and  end  of the window.
	"""
	shrinkWindow(start: Int!, end: Int!): Edges!
	"""
	Set the  start  of the window.
	"""
	shrinkStart(start: Int!): Edges!
	"""
	Set the  end  of the window.
	"""
	shrinkEnd(end: Int!): Edges!
	"""
	Takes a specified selection of views and applies them in order given.
	"""
	applyViews(views: [EdgesViewCollection!]!): Edges!
	"""
	Returns an edge object for each update within the original edge.
	"""
	explode: Edges!
	"""
	Returns an edge object for each layer within the original edge.
	
	Each new edge object contains only updates from the respective layers.
	"""
	explodeLayers: Edges!
	"""
	Specify a sort order.
	"""
	sorted(sortBys: [EdgeSortBy!]!): Edges!
	"""
	Returns the earliest time that this edges is valid or  None  if the edges is valid for all times.
	"""
	start: Int
	"""
	Returns the latest time the specified edges are valid or  None  if the edges is valid for all times.
	"""
	end: Int
	"""
	Returns the number of edges.
	"""
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit  - The size of the page (number of items to fetch).
	offset  - The number of items to skip (defaults to 0).
	page_index  - The number of pages (of size  limit ) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Edge!]!
	list: [Edge!]!
}

input EdgesViewCollection @oneOf {
	defaultLayer: Boolean
	latest: Boolean
	snapshotLatest: Boolean
	snapshotAt: Int
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	window: Window
	at: Int
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
}

type EdgesWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit  - The size of the page (number of items to fetch).
	offset  - The number of items to skip (defaults to 0).
	page_index  - The number of pages (of size  limit ) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Edges!]!
	list: [Edges!]!
}


"""
Document in a vector graph
"""
type GqlDocument {
	"""
	Entity associated with document.
	"""
	entity: DocumentEntity!
	"""
	Content of the document.
	"""
	content: String!
	"""
	Embedding vector.
	"""
	embedding: [Float!]!
	score: Float!
}

type GqlIndexSpec {
	"""
	Returns node metadata.
	"""
	nodeMetadata: [String!]!
	"""
	Returns node properties.
	"""
	nodeProperties: [String!]!
	"""
	Returns edge metadata.
	"""
	edgeMetadata: [String!]!
	"""
	Returns edge properties.
	"""
	edgeProperties: [String!]!
}

type GqlVectorSelection {
	"""
	Returns a list of nodes in the current selection.
	"""
	nodes: [Node!]!
	"""
	Returns a list of edges in the current selection.
	"""
	edges: [Edge!]!
	"""
	Returns a list of documents in the current selection.
	"""
	getDocuments: [GqlDocument!]!
	"""
	Adds all the documents associated with the specified nodes to the current selection.
	
	Documents added by this call are assumed to have a score of 0.
	"""
	addNodes(nodes: [String!]!): GqlVectorSelection!
	"""
	Adds all the documents associated with the specified edges to the current selection.
	
	Documents added by this call are assumed to have a score of 0.
	"""
	addEdges(edges: [InputEdge!]!): GqlVectorSelection!
	"""
	Add all the documents a specified number of hops away to the selection.
	
	Two documents A and B are considered to be 1 hop away of each other if they are on the same entity or if they are on the same node and edge pair.
	"""
	expand(hops: Int!, window: Window): GqlVectorSelection!
	"""
	Adds documents, from the set of one hop neighbours to the current selection, to the selection based on their similarity score with the specified query. This function loops so that the set of one hop neighbours expands on each loop and number of documents added is determined by the specified limit.
	"""
	expandEntitiesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
	"""
	Add the adjacent nodes with higher score for query to the selection up to a specified limit. This function loops like expand_entities_by_similarity but is restricted to nodes.
	"""
	expandNodesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
	"""
	Add the adjacent edges with higher score for query to the selection up to a specified limit. This function loops like expand_entities_by_similarity but is restricted to edges.
	"""
	expandEdgesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
}

type Graph {
	"""
	Returns the names of all layers in the graph.
	"""
	uniqueLayers: [String!]!
	"""
	Returns a view containing only the default edge layer.
	"""
	defaultLayer: Graph!
	"""
	Returns a view containing all the specified layers.
	"""
	layers(names: [String!]!): Graph!
	"""
	Returns a view containing all layers except the specified excluded layers.
	"""
	excludeLayers(names: [String!]!): Graph!
	"""
	Returns a view containing the layer specified.
	"""
	layer(name: String!): Graph!
	"""
	Returns a view containing all layers except the specified excluded layer.
	"""
	excludeLayer(name: String!): Graph!
	"""
	Returns a subgraph of a specified set of nodes.
	"""
	subgraph(nodes: [String!]!): Graph!
	"""
	Returns a view of the graph that only includes valid edges.
	"""
	valid: Graph!
	"""
	Returns a subgraph filtered by the specified node types.
	"""
	subgraphNodeTypes(nodeTypes: [String!]!): Graph!
	"""
	Returns a subgraph containing all nodes except the specified excluded nodes.
	"""
	excludeNodes(nodes: [String!]!): Graph!
	"""
	Creates a rolling window with the specified window size and an optional step..
	"""
	rolling(window: WindowDuration!, step: WindowDuration): GraphWindowSet!
	"""
	Creates a expanding window with the specified step size.
	"""
	expanding(step: WindowDuration!): GraphWindowSet!
	"""
	Return a graph containing only the activity between  start  and  end  measured as milliseconds from epoch
	"""
	window(start: Int!, end: Int!): Graph!
	"""
	Creates a view including all events at a specified time.
	"""
	at(time: Int!): Graph!
	"""
	Creates a view including all events at the latest time.
	"""
	latest: Graph!
	"""
	Create a view including all events that have not been explicitly deleted at the specified time.
	"""
	snapshotAt(time: Int!): Graph!
	"""
	Create a view including all events that have not been explicitly deleted at the latest time.
	"""
	snapshotLatest: Graph!
	"""
	Create a view including all events before a specified end (exclusive).
	"""
	before(time: Int!): Graph!
	"""
	Create a view including all events after a specified start (exclusive).
	"""
	after(time: Int!): Graph!
	"""
	Shrink both the start and end of the window.
	"""
	shrinkWindow(start: Int!, end: Int!): Graph!
	"""
	Set the start of the window to the larger of start and self.start().
	"""
	shrinkStart(start: Int!): Graph!
	"""
	Set the end of the window to the smaller of end and self.end()
	"""
	shrinkEnd(end: Int!): Graph!
	"""
	Returns the timestamp for the creation of the graph.
	"""
	created: Int!
	"""
	Returns the graph's last opened timestamp.
	"""
	lastOpened: Int!
	"""
	Returns the graph's last updated timestamp.
	"""
	lastUpdated: Int!
	"""
	Returns the timestamp of the earliest activity in the graph.
	"""
	earliestTime: Int
	"""
	Returns the timestamp of the latest activity in the graph.
	"""
	latestTime: Int
	"""
	Returns the earliest time that this graph is valid.
	"""
	start: Int
	"""
	Returns the latest time that this graph is valid or None if the graph is valid for all times.
	"""
	end: Int
	"""
	Returns the earliest time that any edge in this graph is valid.
	"""
	earliestEdgeTime(includeNegative: Boolean): Int
	"""
	/// Returns the latest time that any edge in this graph is valid.
	"""
	latestEdgeTime(includeNegative: Boolean): Int
	"""
	Returns the number of edges in the graph.
	"""
	countEdges: Int!
	"""
	Returns the number of temporal edges in the graph.
	"""
	countTemporalEdges: Int!
	"""
	Returns the number of nodes in the graph.
	"""
	countNodes: Int!
	"""
	Returns true if the graph contains the specified node.
	"""
	hasNode(name: String!): Boolean!
	"""
	Returns true if the graph contains the specified edge. Edges are specified by providing a source and destination node id.
	"""
	hasEdge(src: String!, dst: String!, layer: String): Boolean!
	"""
	Gets the node with the specified id.
	"""
	node(name: String!): Node
	"""
	Gets (optionally a subset of) the nodes in the graph.
	"""
	nodes(ids: [String!]): Nodes!
	"""
	Gets the edge with the specified source and destination nodes.
	"""
	edge(src: String!, dst: String!): Edge
	"""
	Gets the edges in the graph.
	"""
	edges: Edges!
	"""
	Returns the properties of the graph.
	"""
	properties: Properties!
	"""
	Returns the metadata of the graph.
	"""
	metadata: Metadata!
	"""
	Returns the graph name.
	"""
	name: String!
	"""
	Returns path of graph.
	"""
	path: String!
	"""
	Returns namespace of graph.
	"""
	namespace: String!
	"""
	Returns the graph schema.
	"""
	schema: GraphSchema!
	algorithms: GraphAlgorithmPlugin!
	sharedNeighbours(selectedNodes: [String!]!): [Node!]!
	"""
	Export all nodes and edges from this graph view to another existing graph
	"""
	exportTo(path: String!): Boolean!
	nodeFilter(filter: NodeFilter!): Graph!
	edgeFilter(filter: EdgeFilter!): Graph!
	"""
	Get index specification.
	"""
	getIndexSpec: GqlIndexSpec!
	"""
	Searches for nodes which match the given filter expression.
	
	Uses Tantivy's exact search.
	"""
	searchNodes(filter: NodeFilter!, limit: Int!, offset: Int!): [Node!]!
	"""
	Searches for edges which match the given filter expression.
	
	Uses Tantivy's exact search.
	"""
	searchEdges(filter: EdgeFilter!, limit: Int!, offset: Int!): [Edge!]!
	applyViews(views: [GraphViewCollection!]!): Graph!
}

type GraphAlgorithmPlugin {
	shortest_path(source: String!, targets: [String!]!, direction: String): [ShortestPathOutput!]!
	pagerank(iterCount: Int!, threads: Int, tol: Float): [PagerankOutput!]!
}

type GraphSchema {
	nodes: [NodeSchema!]!
	layers: [LayerSchema!]!
}

enum GraphType {
	PERSISTENT
	EVENT
}

input GraphViewCollection @oneOf {
	defaultLayer: Boolean
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	subgraph: [String!]
	subgraphNodeTypes: [String!]
	excludeNodes: [String!]
	valid: Boolean
	window: Window
	at: Int
	latest: Boolean
	snapshotAt: Int
	snapshotLatest: Boolean
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
	nodeFilter: NodeFilter
	edgeFilter: EdgeFilter
}

type GraphWindowSet {
	"""
	Returns the number of items.
	"""
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit  - The size of the page (number of items to fetch).
	offset  - The number of items to skip (defaults to 0).
	page_index  - The number of pages (of size  limit ) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Graph!]!
	list: [Graph!]!
}


input IndexSpecInput {
	nodeProps: PropsInput!
	edgeProps: PropsInput!
}

input InputEdge {
	src: String!
	dst: String!
}


type LayerSchema {
	"""
	Returns the name of the layer with this schema
	"""
	name: String!
	"""
	Returns the list of edge schemas for this edge layer
	"""
	edges: [EdgeSchema!]!
}

type MetaGraph {
	"""
	Returns the metagraph name.
	"""
	name: String
	"""
	Returns path of metagraph.
	"""
	path: String!
	"""
	Returns the timestamp for the creation of the metagraph.
	"""
	created: Int!
	"""
	Returns the metagraph's last opened timestamp.
	"""
	lastOpened: Int!
	"""
	Returns the metagraph's last updated timestamp.
	"""
	lastUpdated: Int!
	"""
	Returns the number of nodes in the metagraph.
	"""
	nodeCount: Int!
	"""
	Returns the number of edges in the metagraph.
	"""
	edgeCount: Int!
	"""
	Returns the metadata of the metagraph.
	"""
	metadata: [Property!]!
}

type Metadata {
	get(key: String!): Property
	contains(key: String!): Boolean!
	keys: [String!]!
	values(keys: [String!]): [Property!]!
}

input MetadataFilterExpr {
	name: String!
	operator: Operator!
	value: Value
}

type MutRoot {
	"""
	Returns a plugin.
	"""
	plugins: MutationPlugin!
	"""
	Delete graph from a path on the server.
	"""
	deleteGraph(path: String!): Boolean!
	"""
	Creates a new graph.
	"""
	newGraph(path: String!, graphType: GraphType!): Boolean!
	"""
	Move graph from a path path on the server to a new_path on the server.
	
	If namespace is not provided, it will be set to the current working directory.
	This applies to both the graph namespace and new graph namespace.
	"""
	moveGraph(path: String!, newPath: String!): Boolean!
	"""
	Copy graph from a path path on the server to a new_path on the server.
	
	If namespace is not provided, it will be set to the current working directory.
	This applies to both the graph namespace and new graph namespace.
	"""
	copyGraph(path: String!, newPath: String!): Boolean!
	"""
	Upload graph file from a path on the client.
	
	Returns::
	name of the new graph
	"""
	uploadGraph(path: String!, graph: Upload!, overwrite: Boolean!): String!
	"""
	Send graph bincode as base64 encoded string.
	
	Returns::
	path of the new graph
	"""
	sendGraph(path: String!, graph: String!, overwrite: Boolean!): String!
	"""
	Returns a subgraph given a set of nodes from an existing graph in the server.
	
	Returns::
	name of the new graph
	"""
	createSubgraph(parentPath: String!, nodes: [String!]!, newPath: String!, overwrite: Boolean!): String!
	"""
	Creates search index.
	"""
	createIndex(path: String!, indexSpec: IndexSpecInput, inRam: Boolean!): Boolean!
}

type MutableEdge {
	"""
	Use to check if adding the edge was successful
	"""
	success: Boolean!
	"""
	Get the non-mutable edge for querying
	"""
	edge: Edge!
	"""
	Get the mutable source node of the edge
	"""
	src: MutableNode!
	"""
	Get the mutable destination node of the edge
	"""
	dst: MutableNode!
	"""
	Mark the edge as deleted at time  time
	"""
	delete(time: Int!, layer: String): Boolean!
	"""
	Add metadata to the edge (errors if the value already exists)
	
	If this is called after  add_edge , the layer is inherited from the  add_edge  and does not
	need to be specified again.
	"""
	addMetadata(properties: [PropertyInput!]!, layer: String): Boolean!
	"""
	Update metadata of the edge (existing values are overwritten)
	
	If this is called after  add_edge , the layer is inherited from the  add_edge  and does not
	need to be specified again.
	"""
	updateMetadata(properties: [PropertyInput!]!, layer: String): Boolean!
	"""
	Add temporal property updates to the edge
	
	If this is called after  add_edge , the layer is inherited from the  add_edge  and does not
	need to be specified again.
	"""
	addUpdates(time: Int!, properties: [PropertyInput!], layer: String): Boolean!
}

type MutableGraph {
	"""
	Get the non-mutable graph
	"""
	graph: Graph!
	"""
	Get mutable existing node
	"""
	node(name: String!): MutableNode
	"""
	Add a new node or add updates to an existing node
	"""
	addNode(time: Int!, name: String!, properties: [PropertyInput!], nodeType: String): MutableNode!
	"""
	Create a new node or fail if it already exists
	"""
	createNode(time: Int!, name: String!, properties: [PropertyInput!], nodeType: String): MutableNode!
	"""
	Add a batch of nodes
	"""
	addNodes(nodes: [NodeAddition!]!): Boolean!
	"""
	Get a mutable existing edge
	"""
	edge(src: String!, dst: String!): MutableEdge
	"""
	Add a new edge or add updates to an existing edge
	"""
	addEdge(time: Int!, src: String!, dst: String!, properties: [PropertyInput!], layer: String): MutableEdge!
	"""
	Add a batch of edges
	"""
	addEdges(edges: [EdgeAddition!]!): Boolean!
	"""
	Mark an edge as deleted (creates the edge if it did not exist)
	"""
	deleteEdge(time: Int!, src: String!, dst: String!, layer: String): MutableEdge!
	"""
	Add temporal properties to graph
	"""
	addProperties(t: Int!, properties: [PropertyInput!]!): Boolean!
	"""
	Add metadata to graph (errors if the property already exists)
	"""
	addMetadata(properties: [PropertyInput!]!): Boolean!
	"""
	Update metadata of the graph (overwrites existing values)
	"""
	updateMetadata(properties: [PropertyInput!]!): Boolean!
}

type MutableNode {
	"""
	Use to check if adding the node was successful
	"""
	success: Boolean!
	"""
	Get the non-mutable  Node
	"""
	node: Node!
	"""
	Add metadata to the node (errors if the property already exists)
	"""
	addMetadata(properties: [PropertyInput!]!): Boolean!
	"""
	Set the node type (errors if the node already has a non-default type)
	"""
	setNodeType(newType: String!): Boolean!
	"""
	Update metadata of the node (overwrites existing property values)
	"""
	updateMetadata(properties: [PropertyInput!]!): Boolean!
	"""
	Add temporal property updates to the node
	"""
	addUpdates(time: Int!, properties: [PropertyInput!]): Boolean!
}

type MutationPlugin {
	NoOps: String!
}

type Namespace {
	graphs: CollectionOfMetaGraph!
	path: String!
	parent: Namespace
	children: CollectionOfNamespace!
	items: CollectionOfNamespacedItem!
}

union NamespacedItem = Namespace | MetaGraph

type Node {
	"""
	Returns the unique id of the node.
	"""
	id: String!
	"""
	Returns the name of the node.
	"""
	name: String!
	"""
	Return a view of the node containing only the default edge layer.
	"""
	defaultLayer: Node!
	"""
	Return a view of node containing all layers specified and an error if any of the layers do not exist.
	"""
	layers(names: [String!]!): Node!
	"""
	Return a view of node containing all layers except those specified and an error if any of the layers do not exist.
	"""
	excludeLayers(names: [String!]!): Node!
	"""
	Return a view of node containing the specified layer and errors if the layer does not exist.
	"""
	layer(name: String!): Node!
	"""
	Return a view of node containing all layers except those specified, errors if any of the layers do not exist.
	"""
	excludeLayer(name: String!): Node!
	"""
	Creates a WindowSet with the specified window size and optional step using a rolling window.
	"""
	rolling(window: WindowDuration!, step: WindowDuration): NodeWindowSet!
	"""
	Creates a WindowSet with the specified step size using an expanding window.
	"""
	expanding(step: WindowDuration!): NodeWindowSet!
	"""
	Create a view of the node including all events between the specified start (inclusive) and end (exclusive).
	"""
	window(start: Int!, end: Int!): Node!
	"""
	Create a view of the node including all events at a specified time.
	"""
	at(time: Int!): Node!
	"""
	Create a view of the node including all events at the latest time.
	"""
	latest: Node!
	"""
	Create a view of the node including all events that have not been explicitly deleted at the specified time.
	"""
	snapshotAt(time: Int!): Node!
	"""
	Create a view of the node including all events that have not been explicitly deleted at the latest time.
	"""
	snapshotLatest: Node!
	"""
	Create a view of the node including all events before specified end time (exclusive).
	"""
	before(time: Int!): Node!
	"""
	Create a view of the node including all events after the specified start time (exclusive).
	"""
	after(time: Int!): Node!
	"""
	Shrink both the start and end of the window.
	"""
	shrinkWindow(start: Int!, end: Int!): Node!
	"""
	Set the start of the window to the larger of a specified start time  and self.start().
	"""
	shrinkStart(start: Int!): Node!
	"""
	Set the end of the window to the smaller of a specified end and self.end().
	"""
	shrinkEnd(end: Int!): Node!
	applyViews(views: [NodeViewCollection!]!): Node!
	"""
	Returns the earliest time that the node exists.
	"""
	earliestTime: Int
	firstUpdate: Int
	"""
	Returns the latest time that the node exists.
	"""
	latestTime: Int
	lastUpdate: Int
	"""
	Gets the start time for rolling and expanding windows of this node.
	"""
	start: Int
	"""
	Gets the latest time that this node is valid.
	"""
	end: Int
	"""
	Returns the history of a node, including node additions and changes made to node.
	"""
	history: [Int!]!
	"""
	Get the number of edge events for this node.
	"""
	edgeHistoryCount: Int!
	"""
	Check if the node is active and it's history is not empty.
	"""
	isActive: Boolean!
	"""
	Returns the type of node.
	"""
	nodeType: String
	"""
	Returns the properties of the node.
	"""
	properties: Properties!
	"""
	Returns the metadata of the node.
	"""
	metadata: Metadata!
	"""
	Returns the number of edges connected to this node.
	"""
	degree: Int!
	"""
	Returns the number edges with this node as the source.
	"""
	outDegree: Int!
	"""
	Returns the number edges with this node as the destination.
	"""
	inDegree: Int!
	inComponent: Nodes!
	outComponent: Nodes!
	"""
	Returns all connected edges.
	"""
	edges: Edges!
	"""
	Returns outgoing edges.
	"""
	outEdges: Edges!
	"""
	Returns incoming edges.
	"""
	inEdges: Edges!
	"""
	Returns neighbouring nodes.
	"""
	neighbours: PathFromNode!
	inNeighbours: PathFromNode!
	outNeighbours: PathFromNode!
	nodeFilter(filter: NodeFilter!): Node!
}

input NodeAddition {
	name: String!
	nodeType: String
	metadata: [PropertyInput!]
	updates: [TemporalPropertyInput!]
}

enum NodeField {
	NODE_NAME
	NODE_TYPE
}

input NodeFieldFilter {
	field: NodeField!
	operator: Operator!
	value: Value!
}

input NodeFilter @oneOf {
	node: NodeFieldFilter
	property: PropertyFilterExpr
	metadata: MetadataFilterExpr
	temporalProperty: TemporalPropertyFilterExpr
	and: [NodeFilter!]
	or: [NodeFilter!]
	not: NodeFilter
}

type NodeSchema {
	typeName: String!
	"""
	Returns the list of property schemas for this node
	"""
	properties: [PropertySchema!]!
	metadata: [PropertySchema!]!
}

input NodeSortBy {
	reverse: Boolean
	id: Boolean
	time: SortByTime
	property: String
}

input NodeViewCollection @oneOf {
	defaultLayer: Boolean
	latest: Boolean
	snapshotLatest: Boolean
	snapshotAt: Int
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	window: Window
	at: Int
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
	nodeFilter: NodeFilter
}

type NodeWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit  - The size of the page (number of items to fetch).
	offset  - The number of items to skip (defaults to 0).
	page_index  - The number of pages (of size  limit ) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Node!]!
	list: [Node!]!
}

type Nodes {
	"""
	Return a view of the nodes containing only the default edge layer.
	"""
	defaultLayer: Nodes!
	"""
	Return a view of the nodes containing all layers specified and an error if any of the layers do not exist.
	"""
	layers(names: [String!]!): Nodes!
	"""
	Return a view of the nodes containing all layers except those specified and an error if any of the layers do not exist.
	"""
	excludeLayers(names: [String!]!): Nodes!
	"""
	Return a view of the nodes containing the specified layer and errors if the layer does not exist.
	"""
	layer(name: String!): Nodes!
	"""
	Return a view of the nodes containing all layers except those specified, errors if any of the layers do not exist.
	"""
	excludeLayer(name: String!): Nodes!
	"""
	Creates a WindowSet with the specified window size and optional step using a rolling window.
	"""
	rolling(window: WindowDuration!, step: WindowDuration): NodesWindowSet!
	"""
	Creates a WindowSet with the specified step size using an expanding window.
	"""
	expanding(step: WindowDuration!): NodesWindowSet!
	"""
	Create a view of the node including all events between the specified start (inclusive) and end (exclusive).
	"""
	window(start: Int!, end: Int!): Nodes!
	"""
	Create a view of the nodes including all events at a specified time.
	"""
	at(time: Int!): Nodes!
	"""
	Create a view of the nodes including all events at the latest time.
	"""
	latest: Nodes!
	"""
	Create a view of the nodes including all events that have not been explicitly deleted at the specified time.
	"""
	snapshotAt(time: Int!): Nodes!
	"""
	Create a view of the nodes including all events that have not been explicitly deleted at the latest time.
	"""
	snapshotLatest: Nodes!
	"""
	Create a view of the nodes including all events before specified end time (exclusive).
	"""
	before(time: Int!): Nodes!
	"""
	Create a view of the nodes including all events after the specified start time (exclusive).
	"""
	after(time: Int!): Nodes!
	"""
	Shrink both the start and end of the window.
	"""
	shrinkWindow(start: Int!, end: Int!): Nodes!
	"""
	Set the start of the window to the larger of a specified start time  and self.start().
	"""
	shrinkStart(start: Int!): Nodes!
	"""
	Set the end of the window to the smaller of a specified end and self.end().
	"""
	shrinkEnd(end: Int!): Nodes!
	"""
	Filter nodes by node type.
	"""
	typeFilter(nodeTypes: [String!]!): Nodes!
	"""
	Returns a view of the node types.
	"""
	nodeFilter(filter: NodeFilter!): Nodes!
	applyViews(views: [NodesViewCollection!]!): Nodes!
	sorted(sortBys: [NodeSortBy!]!): Nodes!
	"""
	Returns the earliest time that this Nodes is valid or None if the Nodes are valid for all times.
	"""
	start: Int
	"""
	Returns the latest time that this Nodes is valid or None if the Nodes are valid for all times.
	"""
	end: Int
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit  - The size of the page (number of items to fetch).
	offset  - The number of items to skip (defaults to 0).
	page_index  - The number of pages (of size  limit ) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Node!]!
	list: [Node!]!
	"""
	Returns a view of the node ids.
	"""
	ids: [String!]!
}

input NodesViewCollection @oneOf {
	defaultLayer: Boolean
	latest: Boolean
	snapshotLatest: Boolean
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	window: Window
	at: Int
	snapshotAt: Int
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
	nodeFilter: NodeFilter
	typeFilter: [String!]
}

type NodesWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit  - The size of the page (number of items to fetch).
	offset  - The number of items to skip (defaults to 0).
	page_index  - The number of pages (of size  limit ) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Nodes!]!
	list: [Nodes!]!
}

input ObjectEntry {
	key: String!
	value: Value!
}

enum Operator {
	EQUAL
	NOT_EQUAL
	GREATER_THAN_OR_EQUAL
	LESS_THAN_OR_EQUAL
	GREATER_THAN
	LESS_THAN
	IS_NONE
	IS_SOME
	IS_IN
	IS_NOT_IN
	CONTAINS
	NOT_CONTAINS
}

type PagerankOutput {
	name: String!
	rank: Float!
}

type PathFromNode {
	layers(names: [String!]!): PathFromNode!
	excludeLayers(names: [String!]!): PathFromNode!
	layer(name: String!): PathFromNode!
	excludeLayer(name: String!): PathFromNode!
	rolling(window: WindowDuration!, step: WindowDuration): PathFromNodeWindowSet!
	expanding(step: WindowDuration!): PathFromNodeWindowSet!
	window(start: Int!, end: Int!): PathFromNode!
	at(time: Int!): PathFromNode!
	snapshotLatest: PathFromNode!
	snapshotAt(time: Int!): PathFromNode!
	latest: PathFromNode!
	before(time: Int!): PathFromNode!
	after(time: Int!): PathFromNode!
	shrinkWindow(start: Int!, end: Int!): PathFromNode!
	shrinkStart(start: Int!): PathFromNode!
	shrinkEnd(end: Int!): PathFromNode!
	typeFilter(nodeTypes: [String!]!): PathFromNode!
	start: Int
	end: Int
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit  - The size of the page (number of items to fetch).
	offset  - The number of items to skip (defaults to 0).
	page_index  - The number of pages (of size  limit ) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [Node!]!
	list: [Node!]!
	ids: [String!]!
	applyViews(views: [PathFromNodeViewCollection!]!): PathFromNode!
}

input PathFromNodeViewCollection @oneOf {
	latest: Boolean
	snapshotLatest: Boolean
	snapshotAt: Int
	layers: [String!]
	excludeLayers: [String!]
	layer: String
	excludeLayer: String
	window: Window
	at: Int
	before: Int
	after: Int
	shrinkWindow: Window
	shrinkStart: Int
	shrinkEnd: Int
}

type PathFromNodeWindowSet {
	count: Int!
	"""
	Fetch one "page" of items, optionally offset by a specified amount.
	
	limit  - The size of the page (number of items to fetch).
	offset  - The number of items to skip (defaults to 0).
	page_index  - The number of pages (of size  limit ) to skip (defaults to 0).
	
	e.g. if page(5, 2, 1) is called, a page with 5 items, offset by 11 items (2 pages of 5 + 1),
	will be returned.
	"""
	page(limit: Int!, offset: Int, pageIndex: Int): [PathFromNode!]!
	list: [PathFromNode!]!
}

type Properties {
	get(key: String!): Property
	contains(key: String!): Boolean!
	keys: [String!]!
	values(keys: [String!]): [Property!]!
	temporal: TemporalProperties!
}

type Property {
	key: String!
	asString: String!
	value: PropertyOutput!
}

input PropertyFilterExpr {
	name: String!
	operator: Operator!
	value: Value
}

input PropertyInput {
	key: String!
	value: Value!
}

scalar PropertyOutput

type PropertySchema {
	key: String!
	propertyType: String!
	variants: [String!]!
}

type PropertyTuple {
	time: Int!
	asString: String!
	value: PropertyOutput!
}

input PropsInput @oneOf {
	all: AllPropertySpec
	some: SomePropertySpec
}

type QueryPlugin {
	NoOps: String!
}

type QueryRoot {
	"""
	Hello world demo
	"""
	hello: String!
	"""
	Returns a graph
	"""
	graph(path: String!): Graph!
	"""
	Update graph query, has side effects to update graph state
	
	Returns:: GqlMutableGraph
	"""
	updateGraph(path: String!): MutableGraph!
	"""
	Create vectorised graph in the format used for queries
	
	Returns:: GqlVectorisedGraph
	"""
	vectorisedGraph(path: String!): VectorisedGraph
	"""
	Returns root namespaces
	
	Returns::  List of namespaces on root
	"""
	namespaces: CollectionOfNamespace!
	"""
	Returns a specific namespace at a given path
	
	Returns:: Namespace or error if no namespace found
	"""
	namespace(path: String!): Namespace!
	"""
	Returns root namespace
	
	Returns::  Root namespace
	"""
	root: Namespace!
	"""
	Returns a plugin.
	"""
	plugins: QueryPlugin!
	"""
	Encodes graph and returns as string
	
	Returns:: Base64 url safe encoded string
	"""
	receiveGraph(path: String!): String!
}

type ShortestPathOutput {
	target: String!
	nodes: [String!]!
}

input SomePropertySpec {
	metadata: [String!]!
	properties: [String!]!
}

enum SortByTime {
	LATEST
	EARLIEST
}


type TemporalProperties {
	get(key: String!): TemporalProperty
	contains(key: String!): Boolean!
	keys: [String!]!
	values(keys: [String!]): [TemporalProperty!]!
}

type TemporalProperty {
	key: String!
	history: [Int!]!
	values: [String!]!
	at(t: Int!): String
	latest: String
	unique: [String!]!
	orderedDedupe(latestTime: Boolean!): [PropertyTuple!]!
}

input TemporalPropertyFilterExpr {
	name: String!
	temporal: TemporalType!
	operator: Operator!
	value: Value
}

input TemporalPropertyInput {
	time: Int!
	properties: [PropertyInput!]
}

enum TemporalType {
	ANY
	LATEST
}

scalar Upload

input Value @oneOf {
	u64: Int
	i64: Int
	f64: Float
	str: String
	bool: Boolean
	list: [Value!]
	object: [ObjectEntry!]
}

type VectorisedGraph {
	emptySelection: GqlVectorSelection!
	entitiesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
	nodesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
	edgesBySimilarity(query: String!, limit: Int!, window: Window): GqlVectorSelection!
}

input Window {
	start: Int!
	end: Int!
}

input WindowDuration @oneOf {
	duration: String
	epoch: Int
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @oneOf on INPUT_OBJECT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: QueryRoot
	mutation: MutRoot
}
